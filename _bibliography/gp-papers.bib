---
---


@conference{30daa5322912464e9ae7c123ada96077,  title    = "Exploring the Computational Complexity of SAT Counting and Uniform Sampling with Phase Transitions",  abstract = "Uniform Random Sampling (URS) and Model Counting\ (#SAT) are two intrinsically linked, theoretical problems with relevant practical applications in software engineering. In particular, in configurable system engineering URS and #SAT can support study of configurations{\textquoteright} properties unbiasedly. Despite the community efforts to provide scalable URS and #SAT tools, solving these problems efficiently remains challenging for a large number of formulas. Contrary to the classical SAT problem, whose complexity has been an object of fundamental studies, little is known about what makes a formula hard to count or sample from. For the first time, we investigate how phase transitions can explain the practical complexity of counting and sampling. Our results, computed on 11,409 synthetic formulas and 503 real-world formulas, show that phase transitions occur in both cases, but at a different clause-to-variable ratio than for SAT tasks. We further reveal that low formula modularity is correlated with a higher URS/#SAT time. Overall, our work contributes to a principled understanding of URS and #SAT complexity.",  author   = "Olivier Zeyen and Maxime Cordy and Gilles Perrouin and Mathieu Acher",  year     = "2024",  language = "English",  note     = "46th International Conference on Software Engineering ; Conference date: 12-04-2024 Through 21-04-2024",  url      = "https://conf.researchr.org/home/icse-2024", }


@conference{3e2e6e3ad4f645b7aa68b13b24987d22,  title    = "FairPipes: Data Mutation Pipelines for Machine Learning Fairness",  abstract = "Machine Learning (ML) models are ubiquitous in decision-making applications impacting citizens' lives: credit attribution, crime recidivism, etc. In addition to seeking high performance and generalization abilities, ensuring that ML models do not discriminate against citizens regarding their age, gender, or race is essential. To this end, researchers developed various \emph{fairness} assessment techniques, comprising fairness metrics and mitigation approaches, notably at the model level. However, the sensitivity of ML models to fairness data perturbations has been less explored. This paper presents mutation-based pipelines to emulate fairness variations in the data once the model is deployed. FairPipes implements mutation operators that shuffle sensitive attributes, add new values, or affect their distribution. We evaluated FairPipes on seven ML models over three datasets. Our results highlight different fairness sensitivity behaviors across models, from the most sensitive perceptrons to the insensitive support vector machines. We also consider the role of model optimization in fairness performance, being variable across models. FairPipes automates fairness testing at deployment time, informing researchers and practitioners on the fairness sensitivity evolution of their ML models. ",  author   = "Camille Molinier and Paul Temple and Gilles Perrouin",  year     = "2024",  language = "English", }


@conference{2de20a1dec5c4b8aa6cda200315bbab7,  title    = "Preprocessing is What You Need: Understanding and Predicting the Complexity of SAT-based Uniform Random Sampling",  abstract = "Despite its NP-completeness, the Boolean satisfiability problem gave birth to highly efficient tools that are able to find solutions to a Boolean formula and compute their number.Boolean formulae compactly encode huge, constrained search spaces for variability-intensive systems, e.g., the possible configurations of the Linux kernel.These search spaces are generally too big to explore exhaustively, leading most testing approaches to sample afew solutions before analysing them. A desirable property of such samples is \textit{uniformity}: each solution should get the same selection probability.This property motivated the design of uniform random samplers, relying on SAT solvers and counters and achieving different tradeoffs between uniformity and scalability.Though we can observe their performance in practice, understanding the complexity these tools face and accurately predicting it is an under-explored problem.Indeed, structural metrics such as the number of variables and clauses involved in a formula poorly predict thesampling complexity. More elaborated ones, such as minimal independent support (MIS), are intractable to compute on large formulae.We provide an efficient parallel algorithm to compute a related metric, the \textit{number of equivalence classes}, and demonstrate that this metric is highly correlated to time and memory usage of uniform random sampling and model counting tools. We explore the role of formula preprocessing on various metrics and show its positive influence on correlations. Relying on these correlations, we train an efficient classifier (F1-score 0.97) to predict whetheruniformly sampling a given formula will exceed a specified budget. Our results allow us tocharacterise the similarities and differences between (uniform) sampling, solving and counting.",  author   = "Olivier Zeyen and Maxime Cordy and Gilles Perrouin and Mathieu Acher",  year     = "2024",  language = "English",  note     = "12 International Conference On Formal Methods In Software Engineering ; Conference date: 14-04-2024 Through 15-04-2024",  url      = "https://formalise2024.github.io", }


@conference{46e4be774f4c4f61858ffd8d34ae39bd,  title    = "Time for Networks: Mutation Testing for Timed Automata Networks",  abstract = "Mutation Testing (MT) is a technique employed to assess the effi- cacy of tests by introducing artificial faults, known as mutations, into the system. The goal is to evaluate how well the tests can detect these mutations. These artificial faults are generated using mutation operators, which produce a set of mutations derived from the original system. Mutation operators and frameworks exist for a variety of programming languages, and model-based mutation testing is gaining traction, particularly for timed safety-critical systems. This paper focuses on extending MT to Networks of Timed Automata (NTAs), an area that has not been extensively explored. We introduce mutation operators designed for NTAs specified in UPPAAL, aiming to create temporal interaction faults. We assess the effectiveness of these operators on five UPPAAL NTAs sourced from the literature, specifically examining the generation of equivalent and duplicate mutants. Our results demonstrate a varied prevalence of equivalent mutants (from 12% to 71%) while the number of duplicates is less. In all cases, timed bisimulation was able to process each mutant pair in less than one second.",  author   = "David Cort{\'e}s and {Ortiz Vega}, {James Jerson} and Davide Basile and {Aranda Bueno}, {Jes{\'u}s Alexander} and Gilles Perrouin and Pierre-Yves Schobbens",  year     = "2024",  language = "English",  note     = "12 International Conference On Formal Methods In Software Engineering ; Conference date: 14-04-2024 Through 15-04-2024",  url      = "https://formalise2024.github.io", }


@inproceedings{d904f953393044b99e55a05def49ef4a,  title     = "Towards Feature-based ML-enabled Behaviour Location",  abstract  = "Mapping behaviours to the features they relate to is a prerequisite for variability-intensive systems (VIS) reverse engineering. Manually providing this whole mapping is labour-intensive. In black-box scenarios, only execution traces are available (e.g., process mining). In our previous work, we successfully experimented with variant-based mapping using supervised machine learning (ML) to identify the variants responsible of the production of a given execution trace, and demonstrated that recurrent neural networks (RNNs) work well (above 80% accuracy) when trained on datasets in which we label execution traces with variants. However, this mapping (i) may not scale to large VIS because of combinatorial explosion and (ii) makes the internal ML representation hard to understand. In this short paper, we discuss the design of a novel approach: feature-based mapping learning.",  author    = "Sophie Fortz and Paul Temple and Xavier Devroey and Gilles Perrouin",  note      = "Publisher Copyright: {\textcopyright} 2024 ACM.; 18th International Working Conference on Variability Modelling of Software-Intensive Systems (VaMoS 2024) ; Conference date: 07-02-2024 Through 09-02-2024",  year      = "2024",  month     = feb,  day       = "7",  doi       = "10.1145/3634713.3634734",  language  = "English",  series    = "Proceedings of the 18th International Working Conference on Variability Modelling of Software-Intensive Systems",  publisher = "ACM Press",  booktitle = "Proceedings of the 18th International Working Conference on Variability Modelling of Software-Intensive Systems (VaMoS 2024)",  address   = "United States",  url       = "https://vamos2024.inf.unibe.ch", }


@techreport{efdf59e220af4aacb4d7f6bc77f4bdc6,  title    = "You Can REST Now: Automated Specification Inference and Black-Box Testing of RESTful APIs with Large Language Models",  abstract = "RESTful APIs are popular web services, requiring documentation to ease their comprehension, reusability and testing practices. The OpenAPI Specification (OAS) is a widely adopted and machine-readable format used to document such APIs. However, manually documenting RESTful APIs is a time-consuming and error-prone task, resulting in unavailable, incomplete, or imprecise documentation. As RESTful API testing tools require an OpenAPI specification as input, insufficient or informal documentation hampers testing quality. Recently, Large Language Models (LLMs) have demonstrated exceptional abilities to automate tasks based on their colossal training data. Accordingly, such capabilities could be utilized to assist the documentation and testing process of RESTful APIs. In this paper, we present RESTSpecIT, the first automated RESTful API specification inference and black-box testing approach leveraging LLMs. The approach requires minimal user input compared to state-of-the-art RESTful API inference and testing tools; Given an API name and an LLM key, HTTP requests are generated and mutated with data returned by the LLM. By sending the requests to the API endpoint, HTTP responses can be analyzed for inference and testing purposes. RESTSpecIT utilizes an in-context prompt masking strategy, requiring no model fine-tuning. Our evaluation demonstrates that RESTSpecIT is capable of: (1) inferring specifications with 85.05% of GET routes and 81.05% of query parameters found on average, (2) discovering undocumented and valid routes and parameters, and (3) uncovering server errors in RESTful APIs. Inferred specifications can also be used as testing tool inputs.",  keywords = "cs.SE",  author   = "Alix Decrop and Gilles Perrouin and Mike Papadakis and Xavier Devroey and Pierre-Yves Schobbens",  year     = "2024",  month    = feb,  day      = "7",  language = "English",  type     = "WorkingPaper", }


@inbook{ab93e9babd1840acba406cdb96d19345,  title     = "27th ACM International Systems and Software Product Line Conference, SPLC 2023: Welcome Message",  author    = "Paolo Arcaini and {Ter Beek}, {Maurice H.} and Gilles Perrouin and Iris Reinhartz-Berger and Luaces, {Miguel R.} and Christa Schwanninger and Shaukat Ali and Mahsa Varshosaz and Angelo Gargantini and Stefania Gnesi and Malte Lochau and Laura Semini and Ivan MacHado and Vergilio, {Silvia Regina} and Rick Rabiser and Tao Yue and Xavier Devroey and M{\'o}nica Pinto and Hironori Washizaki and Lea Gerling and Jacob Kr{\"u}ger and Goetz Botterweck and Natsuko Noda and Fuyuki Ishikawa and Mitsuhiro Kitani and Tsutomu Kobayashi and Yuta Yanagi and Zhang, {Xiao Yi} and Zhenya Zhang and Nobukazu Yoshioka and Stefan Klikovits",  year      = "2023",  month     = aug,  day       = "28",  language  = "English",  volume    = "A-1",  series    = "ACM International Conference Proceeding Series",  publisher = "ACM Press",  pages     = "X",  booktitle = "Proceedings of the 27th ACM International Systems and Software Product Line Conference, SPLC 2023",  address   = "United States",  note      = "27th ACM International Systems and Software Product Line Conference, SPLC 2023 ; Conference date: 28-08-2023 Through 01-09-2023", }


@inproceedings{f61a207f435e4f2fb90795d804ed5537,  title     = "Architectural Bad Smells for Self-Adaptive Systems: Go Runtime!",  abstract  = "Self-adaptive systems (SAS) change their behavior and structure at runtime depending on environmental changes or user requests. For this purpose, the SASs combine architectural fragments or solutions in their adaptation process. However, this process may negatively impact the system{\textquoteright}s architectural qualities, exhibiting architectural bad smells (ABS). Current studies perform ABS detection for SAS at design time, ignoring their intrinsic runtime variability. We demonstrate that this ignorance leads to inaccurate smell detections and possibly wrong maintenance decisions. We delineate the challenges runtime variability raise on ABS detection and argue that we should analyze SAS architectures at runtime.",  keywords  = "Architectural Quality, Architectural Smells, Runtime Validation., Self-Adaptive Systems, Software architecture",  author    = "Santos, {Edilton Lima dos} and Pierre-Yves Schobbens and Ivan Machado and Gilles Perrouin",  note      = "Funding Information: Edilton Lima dos Santos is funded by a CERUNA grant from the University of Namur. Gilles Perrouin is an FNRS Research Associate. This work was partly funded by the ERDF IDEES Co-innovation project, and partly funded by the Coordena{\c c}{\~a}o de Aperfei{\c c}oamento de Pessoal de N{\'i}vel Superior - Brasil (CAPES) - Finance Code 001. Publisher Copyright: {\textcopyright} 2023 ACM.",  year      = "2023",  month     = jan,  day       = "25",  doi       = "10.1145/3571788.3571802",  language  = "English",  series    = "ACM International Conference Proceeding Series",  publisher = "ACM Press",  pages     = "85--87",  editor    = "Cohen, {Myra B.} and Thomas Th{\"u}m and Jacopo Mauro",  booktitle = "Proceedings of the 17th International Working Conference on Variability Modelling of Software-Intensive Systems, VaMoS 2023, Odense, Denmark, January 25-27, 2023",  address   = "United States", }


@article{dadc574eb0fe42409d6f718c68e630a5,  title     = "BURST: Benchmarking uniform random sampling techniques",  abstract  = "BURST is a benchmarking platform for uniform random sampling (URS) techniques. Given: i) the description of a sampling space provided as a Boolean formula (DIMACS), and ii) a sampling budget (time and strength of uniformity), BURST evaluates ten samplers for scalability and uniformity. BURST measures scalability based on the time required to produce a sample, and uniformity based on the state-of-the-art and proven statistical test Barbarik. BURST is easily extendable to new samplers and offers: i) 128 feature models (for highly-configurable systems), ii) many other models mined from the artificial intelligence/satisfiability solving benchmarks. BURST envisions supporting URS assessment and design across multiple research communities.",  keywords  = "Configurable systems, Sampling, SAT, Software product lines, Variability model",  author    = "Mathieu Acher and Gilles Perrouin and Maxime Cordy",  note      = "Funding Information: The authors would particularly like to thank Kuldeep S. Meel from National University of Singapore, Mate Soos from Zalando Germany and their colleagues for their help setting up and fixing Barbarik as well as the CMS samplers. This research was partly funded by the ANR-17-CE25-0010-01 VaryVary project. Gilles Perrouin is a Research Associate at the FNRS. Maxime Cordy was supported by FNR Luxembourg (grant C19/IS/13566661/BEEHIVE/Cordy). Funding Information: The authors would particularly like to thank Kuldeep S. Meel from National University of Singapore, Mate Soos from Zalando Germany and their colleagues for their help setting up and fixing Barbarik as well as the CMS samplers. This research was partly funded by the ANR - 17-CE25-0010-01 VaryVary project. Gilles Perrouin is a Research Associate at the FNRS. Maxime Cordy was supported by FNR Luxembourg (grant C19/IS/13566661/BEEHIVE/Cordy ). Publisher Copyright: {\textcopyright} 2022 Elsevier B.V.",  year      = "2023",  month     = mar,  doi       = "10.1016/j.scico.2022.102914",  language  = "English",  volume    = "226",  journal   = "Science of Computer Programming",  issn      = "0167-6423",  publisher = "Elsevier", }


@inproceedings{e42fb73982694243b9d3c030ea285264,  title     = "Explicit or Implicit? On Feature Engineering for ML-based Variability-intensive Systems",  abstract  = "Software variability engineering benefits from Machine Learning (ML) to learn e.g., variability-Aware performance models, explore variants of interest and minimize their energy impact. As the number of applications of combining variability with ML grows, we would like to reflect on what is the core to the configuration process in software variability and inference in ML: feature engineering. These disciplines previously managed features explicitly, easing graceful combinations. Now, deep learning techniques derive automatically obscure but efficient features from data.",  keywords  = "feature, machine learning, software variability",  author    = "Paul Temple and Gilles Perrouin",  note      = "Funding Information: Gilles Perrouin is an FNRS Research Associate. This work was partly funded by the EOS-VeriLearn, project number 30992574 of the Fonds de la Recherche Scientifique (F.R.S-FNRS) in Belgium. Publisher Copyright: {\textcopyright} 2023 ACM.",  year      = "2023",  month     = jan,  day       = "25",  doi       = "10.1145/3571788.3571804",  language  = "English",  series    = "ACM International Conference Proceeding Series",  publisher = "ACM Press",  pages     = "91--93",  editor    = "Cohen, {Myra B.} and Thomas Th{\"u}m and Jacopo Mauro",  booktitle = "Proceedings of the 17th International Working Conference on Variability Modelling of Software-Intensive Systems, VaMoS 2023, Odense, Denmark, January 25-27, 2023",  address   = "United States", }


@inproceedings{f422027f152a43e795509a5ea19193a6,  title     = "FairBayRank: A Fair Personalized Bayesian Ranker",  abstract  = "Recommender systems are data-driven models that successfully pro- vide users with personalized rankings of items (movies, books...). Meanwhile, for user minority groups, those systems can be unfair in predicting users{\textquoteright} expectations due to biased data. Consequently, fairness remains an open challenge in the rank- ing prediction task. To address this issue, we propose in this paper FairBayRank, a fair Bayesian personalized ranking algorithm that deals with both fairness and ranking performance requirements. FairBayRank evaluation on real-world datasets shows that it efficiently alleviates unfairness issues while ensuring high prediction performances.",  author    = "{Noulapeu Ngaffo}, Armielle and Julien Albert and Beno{\^i}t Fr{\'e}nay and Gilles Perrouin",  year      = "2023",  language  = "English",  booktitle = "31st European Symposium on Artificial Neural Networks, Computational Intelligence and Machine Learning Bruges, Belgium October 04 - 06",  note      = "31st European Symposium on Artificial Neural Networks, Computational Intelligence and Machine Learning ; Conference date: 04-10-2023 Through 06-10-2023",  url       = "https://www.esann.org", }


@inproceedings{04d7210fcaa4487abac6d43961541d3f,  title     = "MUPPAAL: Reducing and Removing Equivalent and Duplicate Mutants in UPPAAL",  abstract  = "Mutation Testing (MT) is a test quality assessment technique that creates mutants by injecting artificial faults into the system and evaluating the ability of tests to distinguish these mutants. We focus on MT for safety-critical Timed Automata (TA). MT is prone to equivalent and duplicate mutants, the former having the same behaviour as the original system and the latter other mutants. Such mutants bring no value and induce useless test case executions. We propose MUPPAAL, a tool that: (1) offers a new operator reducing the occurrence of mutant duplicates; (2) an efficient bisimulation algorithm removing remaining duplicates; (3) leverages existing equivalence-avoiding mutation operators. Our experiments on four UPPAAL case studies indicate that duplicates represent up to 32% of all mutants and that the MUPPAAL bisimulation algorithm can identify them more than 99% of the time.",  keywords  = "Model-Based Testing, Mutation Testing, Timed Automata, UPPAAL",  author    = "{CUARTAS GRANADA}, Jaime and {ARANDA BUENO}, {Jesus Alexander} and Maxime Cordy and {Ortiz Vega}, {James Jerson} and Gilles Perrouin and Pierre-Yves Schobbens",  note      = "Funding Information: Gilles Perrouin is an FNRS (Fonds National de la Recherche Scientifique) Research Associate. Jaime Cuartas received support from ERASMUS+ while at the University of Namur. Maxime Cordy obtained funding from FNR Luxembourg (grant INTER/FNRS/20/15077233/Scaling Up Variability/ Cordy). Work partially funded by ERDF project IDEES. We thank Paul Temple for the early discussions on this work. Funding Information: ACKNOWLEDGMENT Gilles Perrouin is an FNRS (Fonds National de la Recherche Scientifique) Research Associate. Jaime Cuartas received support from ERASMUS+ while at the University of Namur. Maxime Cordy obtained funding from FNR Luxembourg (grant INTER/FNRS/20/15077233/Scaling Up Variability/Cordy). Work partially funded by ERDF project IDEES. We thank Paul Temple for the early discussions on this work. Publisher Copyright: {\textcopyright} 2023 IEEE.; 16th IEEE International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2023 ; Conference date: 16-04-2023 Through 20-04-2023",  year      = "2023",  month     = apr,  day       = "16",  doi       = "10.1109/icstw58534.2023.00021",  language  = "English",  series    = "2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)",  publisher = "Institute of Electrical and Electronics Engineers Inc.",  pages     = "52--61",  booktitle = "Proceedings - 2023 IEEE 16th International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2023",  address   = "United States", }


@article{fcdc804b5ff94dd2a3b4a0efb786b7a5,  title     = "Providing command and control agility: A software product line approach",  abstract  = "Command and Control (C2) is a broad concept that encompasses the coordination of individuals and organizations towards achieving a goal. However, dynamic and uncertain scenarios, such as military and disaster relief operations, present an inherent challenge to C2 activities. In such situations, plans often need to be changed in the face of unforeseen problems, and even coordination processes may be subject to variation. This dynamism increases the complexity of resource management and requires C2 Agility—i.e., the ability to respond to change in a timely and suitable fashion. Nonetheless, there is a lack of solutions to provide C2 Agility to cope with dynamic contexts. To address this problem, this work proposes a computational model of C2 Agility for a team of autonomous agents. This model describes how to combine reconfiguration of individual team members and of coordination approaches to adapt to context changes. The proposed approach leverages a typed-parameterized extension of a channel system to define the coordinating roles and responsibilities of team members. Each member is modeled as a dynamic software product line, with the inherent ability to reconfigure itself. To assess this model, a team of Unmanned Aerial Vehicles (UAV) performing a reconnaissance mission was simulated. The simulation showed that the proposed model was suitable for dealing with dynamic contexts. Particularly, metrics for the agile approach suggest improved system resilience in the face of induced perturbations, compared to non-agile C2. The obtained results with the proposed software-based simulations showed that the proposed model is useful in providing C2 Agility to the studied scenarios, making the behavior of the entities specified in the model capable of dealing with context changes.",  keywords  = "Agility, Command and control, Dynamic context, Dynamic software product lines",  author    = "Amorim, {Junier Caminha} and Rocha, {Eduardo Lemos} and Luigi Minardi and Vander Alves and {de Freitas}, {Edison Pignaton} and Thiago Castro and Moussa Amrani and James Ortiz and Schobbens, {Pierre Yves} and Gilles Perrouin",  note      = "Funding Information: This study was partially funded by the Coordination for the Improvement of Higher Education Personnel Agency (CAPES), Brazil , under finance code 001, and the National Council for Scientific and Technological Development (CNPq), Brazil . Vander Alves was partially supported by CNPq (grant 313097/2021-6 ), FAPDF (Process SEI 00193- 00000926/2019-67), and joint CAPES/WBI, Brazil Grant “Testing Highly Configurable Systems”. Edison Pignaton de Freitas is partially supported by CNPq , Projects 309505/2020-8 and 420109/2018-8. Gilles Perrouin is an FNRS associate, and he was partially supported by ERDF IDEES Co-Innovation project, Brazil . Pierre Yves Schobbens and Gilles Perrouin were partially supported by joint WBI/CAPES Grant “Testing Highly Configurable Systems” and EOS-VeriLearn, project number 30992574 of the Fonds de la Recherche Scientifique (F.R.S-FNRS) in Belgium. Moussa Amrani is a Post-Doc Researcher at the Faculty of Computer Science and the Namur Digital Institute (NaDI), both affiliated with the University of Namur, Belgium. We also thank to the Brazilian Army for the support provided via the research project S2C2, ref. 2904/20. Funding Information: This study was partially funded by the Coordination for the Improvement of Higher Education Personnel Agency (CAPES), Brazil, under finance code 001, and the National Council for Scientific and Technological Development (CNPq), Brazil. Vander Alves was partially supported by CNPq (grant 313097/2021-6), FAPDF (Process SEI 00193- 00000926/2019-67), and joint CAPES/WBI, Brazil Grant “Testing Highly Configurable Systems”. Edison Pignaton de Freitas is partially supported by CNPq, Projects 309505/2020-8 and 420109/2018-8. Gilles Perrouin is an FNRS associate, and he was partially supported by ERDF IDEES Co-Innovation project, Brazil. Pierre Yves Schobbens and Gilles Perrouin were partially supported by joint WBI/CAPES Grant “Testing Highly Configurable Systems” and EOS-VeriLearn, project number 30992574 of the Fonds de la Recherche Scientifique (F.R.S-FNRS) in Belgium. Moussa Amrani is a Post-Doc Researcher at the Faculty of Computer Science and the Namur Digital Institute (NaDI), both affiliated with the University of Namur, Belgium. We also thank to the Brazilian Army for the support provided via the research project S2C2, ref. 2904/20. Publisher Copyright: {\textcopyright} 2023 Elsevier Ltd",  year      = "2023",  month     = apr,  day       = "15",  doi       = "10.1016/j.eswa.2022.119473",  language  = "English",  volume    = "216",  journal   = "Expert Systems with Applications",  issn      = "0957-4174",  publisher = "Elsevier", }


@conference{35548a567daa4f8684f7d28323def692,  title    = "Abstract: Towards Assessing Architectural Smells for Self-Adaptive Systems at Runtime",  abstract = "Self-adaptive systems (SAS) change their behavior and structure at runtime to answer the changes in their environment. Such systems combine different architectural fragments or solutions via feature binding/unbinding at runtime. Moreover, this combination may negatively impact the system's architectural qualities, exhibiting architectural bad smells (ABS). These issues are challenging to detect in the code due to the combinatorial explosion of interactions amongst features. Since SAS do not document these features in their source code, design time smell detection ignores them and risks reporting smells that are different than those observed at runtime. This paper assesses this risk to understand how ABS occur at runtime for different feature combinations. We look for cyclic dependency and hub-like ABS in various runtime adaptations of two SAS, Adasim and mRubis. Our results indicate that architectural smells are feature-dependent and that their number is highly variable from one adaptation to the other. Some ABS appear in all runtime adaptations, some in only a few. We discuss the reasons behind these architectural smells for each system and draw some lessons for targeted analyses of ABS in SAS.",  keywords = "Architectural Smells, Self-Adaptive Systems, Behavioral Maps",  author   = "{Lima dos Santos}, Edilton and Pierre-Yves Schobbens and Gilles Perrouin",  year     = "2022",  month    = sep,  day      = "13",  language = "English",  pages    = "1",  note     = "The 21st Belgium-Netherlands Software Evolution Workshop, BENEVOL 2022 ; Conference date: 12-09-2022 Through 13-09-2022",  url      = "https://benevol2022.github.io/,", }


@inproceedings{59e0b6ba4af54c9cbe1c3ca93865fe46,  title     = "Behavioral Maps: Identifying Architectural Smells in Self-Adaptive Systems at Runtime",  abstract  = "Self-adaptive systems (SAS) change their behavior and structure at runtime, depending on environmental changes and reconfiguration plans and goals. Such systems combine architectural fragments or solutions in their (re)configuration process. However, this process may negatively impact the system's architectural qualities, exhibiting architectural bad smells (ABS). Also, some smells may appear in only particular runtime conditions. This issue is challenging to detect due to the combinatorial explosion of interactions amongst features. We initially proposed the notion of Behavioral Map to explore architectural issues at runtime. This extended study applies the Behavioral Map to analyze the ABS in self-adaptive systems at runtime. In particular, we look for Cyclic Dependency, Extraneous Connector, Hub-Like Dependency, and Oppressed Monitor ABS in various runtime adaptations in the Smart Home Environment (SHE) framework, Adasim, and mRUBiS systems developed in Java. The results indicate that runtime ABS identification is required to fully capture SAS architectural qualities because the ABS are feature-dependent, and their number is highly variable for each adaptation. We have observed that some ABS appears in all runtime adaptations, some in only a few. However, some ABS only appear in the publish-subscribe architecture, such as Extraneous Connector and Oppressed Monitor smell. We discuss the reasons behind these architectural smells for each system and motivate the need for targeted ABS analyses in SAS.",  keywords  = "Architectural Smells, Dynamic Software Product Lines, Runtime Validation, Self-adaptive Systems, Behavioral Maps, Architectural smells, Dynamic software product lines, Self-adaptive systems, Runtime validation, Behavioral maps",  author    = "{Lima dos Santos}, Edilton and Sophie Fortz and Pierre-Yves Schobbens and Gilles Perrouin",  note      = "Funding Information: Acknowledgements. Edilton Lima dos Santos is funded by a CERUNA grant from the University of Namur. Sophie Fortz is supported by the FNRS via a FRIA grant. Gilles Perrouin is an FNRS Research Associate. Publisher Copyright: {\textcopyright} 2022, The Author(s), under exclusive license to Springer Nature Switzerland AG. Publisher Copyright: {\textcopyright} 2022, The Author(s), under exclusive license to Springer Nature Switzerland AG.",  year      = "2022",  month     = aug,  day       = "19",  doi       = "10.1007/978-3-031-15116-3_8",  language  = "English",  isbn      = "978-3-031-15116-3",  volume    = "13365",  series    = "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",  publisher = "Springer Nature Switzerland AG",  pages     = "159--180",  editor    = "Patrizia Scandurra and Matthias Galster and Raffaela Mirandola and Danny Weyns and Danny Weyns",  booktitle = "Software Architecture - 15th European Conference, ECSA 2021 Tracks and Workshops, Revised Selected Papers",  address   = "Switzerland",  edition   = "Lecture Notes in Computer Science", }


@inproceedings{dcb5305a9506427798287524bd3ed3d6,  title     = "Featured Scents: Towards Assessing Architectural Smells for Self-Adaptive Systems at Runtime",  abstract  = "Self-adaptive systems (SAS) change their behavior and structure at runtime to answer the changes in their environment. Such systems combine different architectural fragments or solutions via feature binding/unbinding at runtime. Moreover, this combination may negatively impact the system's architectural qualities, exhibiting architectural bad smells (ABS). These issues are challenging to detect in the code due to the combinatorial explosion of interactions amongst features. Since SAS does not document these features in their source code, design time smell detection ignores them and risks reporting smells that are different than those observed at runtime. This paper assesses this risk to understand how ABS occurs at runtime for different feature combinations. We look for cyclic dependency and hub-like ABS in various runtime adaptations of two SAS, Adasim and mRubis. Our results indicate that architectural smells are feature-dependent and that their number is highly variable from one adaptation to the other. Some ABS appear in all runtime adaptations, some in only a few. We discuss the reasons behind these architectural smells for each system and motivate the need for targeted ABS analyses in SAS.",  keywords  = "Architectural Smells, Self-Adaptive Systems, Arcan, Behavioral Maps",  author    = "{Lima dos Santos}, Edilton and Pierre-Yves Schobbens and Gilles Perrouin",  note      = "Funding Information: ACKNOWLEDGMENT Edilton Lima dos Santos is funded by a CERUNA grant from the University of Namur. Gilles Perrouin is an FNRS Research Associate. Publisher Copyright: {\textcopyright} 2022 IEEE.; 19th International Conference on Software Architecture ; Conference date: 13-03-2022 Through 15-03-2022",  year      = "2022",  month     = mar,  doi       = "10.1109/icsa-c54293.2022.00026",  language  = "English",  isbn      = "978-1-6654-9494-6",  series    = "2022 IEEE 19th International Conference on Software Architecture Companion, ICSA-C 2022",  publisher = "IEEE",  pages     = "104--107",  booktitle = "2022 IEEE 19th International Conference on Software Architecture Companion, ICSA-C 2022",  url       = "https://icsa-conferences.org/2022/", }


@conference{a4f446ff5b4a4abaa4d0260126329494,  title    = "Identifying Architectural Smells in Self-Adaptive Systems at Runtime",  abstract = "Self-adaptive systems (SAS) change their architecture or behavior depending on the (re)configuration plans to answer the environmental context. Moreover, the (re)configurations process may also negatively affect the system{\textquoteright}s architectural qualities because this process combines different architectural fragments or solutions via feature binding/unbinding at runtime. Thus, Architectural Bad Smells (ABS) may emerge, implying reduced system maintainability. Also, it indicates possible design and implementation issues and helps improve the system{\textquoteright}s quality. But, ABS is less studied in SAS. However, these studies do not analyze the impact of runtime variability on smell detection and evolution as the SAS adapts. We extend our previous work to employ the Behavioral Map to analyze the ABS in SAS at runtime. In particular, we presented the feature identification process employed to instrument the source code of the SASs to detect ABS at runtime. We targeted for Cyclic Dependency (CD), Extraneous Connector (EC), Hub-Like Dependency (HL), and Oppressed Monitor (OM) ABS in multiple runtime adaptations in the SHE [8], Adasim [9], and mRUBiS [10] systems developed in Java. Our results suggest that some ABS appear only in a specific system configuration or architecture. For instance, the EC and OM smell appear in publish-subscribe architecture, as used in SHE. Also, we observed that the type and number of ABS found in the SAS depend on the configuration analyzed at runtime. For instance, in Adasim, the BM found 9 CD and 3 HL smells in the first adaptation, but the BM found 6 CD smells in the second adaptation. We could explain this variation by binding/unbinding certain runtime features. Thus, the Behavioral Map offers interesting support for assessing the architectural qualities of a given runtime adaptation. However, instrumenting the systems for runtime ABS identification demands expertise and time because the core and variable features are not documented. This paper provides the following contributions: i) A first study to identify ABS for SAS at runtime; ii) Our analysis based on two runtime adaptations of SHE, 40 runtime adaptations of Adasim, and 16 runtime adaptations of mRUBiS, demonstrate that runtime variability affects the type and occurrence of smells found; iii) The results and scripts to process behavioral maps are available in Github.",  keywords = "Architectural Smells, Dynamic Software Product Lines, Runtime Validation, Self-adaptive Systems, Behavioral Maps",  author   = "{Lima dos Santos}, Edilton and Sophie Fortz and Pierre-Yves Schobbens and Gilles Perrouin",  year     = "2022",  month    = jun,  language = "English",  note     = "Conf{\'e}rence francophone sur les Architectures Logicielles (CAL) : 13{\`e}me {\'e}dition de la Conf{\'e}rence francophone sur les Architectures Logicielles (CAL), CAL ; Conference date: 07-06-2022 Through 10-06-2022",  url      = "https://www.redcad.org/events/cal2022/index.html", }


@inproceedings{d9e29a5b3b7a4d6a92968444f4562989,  title     = "IntJect: Vulnerability Intent Bug Seeding",  abstract  = "Studying and exposing software vulnerabilities is important to ensure software security, safety, and reliability. Software engineers often inject vulnerabilities into their programs to test the reliability of their test suites, vulnerability detectors, and security measures. However, state-of-the-art vulnerability injection methods only capture code syntax/patterns, they do not learn the intent of the vulnerability and are limited to the syntax of the original dataset. To address this challenge, we propose the first intent-based vulnerability injection method that learns both the program syntax and vulnerability intent. Our approach applies a combination of NLP methods and semantic-preserving program mutations (at the bytecode level) to inject code vulnerabilities. Given a dataset of known vulnerabilities (containing benign and vulnerable code pairs), our approach proceeds by employing semantic-preserving program mutations to transform the existing dataset to semantically similar code. Then, it learns the intent of the vulnerability via neural machine translation (Seq2Seq) models. The key insight is to employ Seq2Seq to learn the intent (context) of the vulnerable code in a manner that is agnostic of the specific program instance. We evaluate the performance of our approach using 1275 vulnerabilities belonging to five (5) CWEs from the Juliet test suite. We examine the effectiveness of our approach in producing compilable and vulnerable code. Our results show that IntJECT is effective, almost all (99%) of the code produced by our approach is vulnerable and compilable. We also demonstrate that the vulnerable programs generated by IntJECT are semantically similar to the withheld original vulnerable code. Finally, we show that our mutation-based data transformation approach outperforms its alternatives, namely data obfuscation and using the original data.",  keywords  = "Software Reliability, Software Security, Software Vulnerabilities, Vulnerability injection",  author    = "Benjamin PETIT and Ahmed Khanfir and Ezekiel Soremekun and Gilles Perrouin and Michail Papadakis",  note      = "Publisher Copyright: {\textcopyright} 2022 IEEE.",  year      = "2022",  doi       = "10.1109/qrs57517.2022.00013",  language  = "English",  series    = "IEEE International Conference on Software Quality, Reliability and Security, QRS",  pages     = "19--30",  booktitle = "Proceedings - 2022 IEEE 22nd International Conference on Software Quality, Reliability and Security, QRS 2022", }


@book{9fe4e85073104eae987c3a7307bcecba,  title     = "Reuse and Software Quality: 20th International Conference on Software and Systems Reuse, ICSR 2022, Montpellier, France, June 15-17, 2022, Proceedings",  editor    = "Gilles Perrouin and Naouel Moha and Abdelhak-Djamel Seriai",  year      = "2022",  doi       = "10.1007/978-3-031-08129-3",  language  = "English",  isbn      = "978-3-031-08128-6",  volume    = "13297",  series    = "Lecture Notes in Computer Science",  publisher = "Springer", }


@conference{378693218602429d8194df33b7e56729,  title    = "A Take on Obfuscation with Ethical Adversaries",  author   = "Pieter Delobelle and Paul Temple and Gilles Perrouin and Benoit Fr{\'e}nay and Patrick Heymans and Bettina Berendt",  year     = "2021",  language = "Ind{\'e}fini/inconnu",  note     = "3rd Workshop on Obfuscation ; Conference date: 04-05-2021 Through 07-05-2021", }


@inproceedings{bf3a93aa06bf4461994376e80493c1b3,  title     = "A Vision to identify Architectural Smells in Self-Adaptive Systems using Behavioral Maps",  abstract  = "Self-adaptive systems can be implemented as Dynamic Software Product Lines (DSPLs) via dynamically enabling or disabling features at runtime based on a feature model. However, the runtime (re)configuration may negatively impact the system's architectural qualities, exhibiting architectural bad smells. Such smells may appear in only very specific runtime conditions, and the combinatorial explosion of the number of configurations induced by features makes exhaustive analysis intractable. We are therefore targeting smell detection at runtime for one specific configuration determined through a MAPE-K loop. To support smell detection, we propose the Behavioral Map (BM) formalism to derive automatically key architectural characteristics from different sources (feature model, source code, and other deployment artifacts) and represent them in a graph. We provide identification guidelines based on the BM for four architectural smells and illustrate the approach on Smart Home Environment (SHE) DSPL.",  author    = "{Lima dos Santos}, Edilton and Sophie Fortz and GILLES PERROUIN and Pierre-Yves Schobbens",  year      = "2021",  month     = sep,  day       = "13",  language  = "English",  pages     = "1",  editor    = "Robert Heinrich and Raffaela Mirandola and Danny Weyns",  booktitle = "ECSA2021 Companion Volume",  publisher = "CEUR Workshop Proceedings",  note      = "15th European Conference on Software Architecture (ECSA 2021), ECSA ; Conference date: 13-09-2021 Through 17-09-2021",  url       = "https://conf.researchr.org/home/ecsa-2021", }


@inproceedings{b944314474bf45219d05923d1bb1ef8e,  title     = "BURST: A Benchmarking Platform for Uniform Random Sampling Techniques",  author    = "Mathieu Acher and GILLES PERROUIN and Maxime Cordy",  year      = "2021",  language  = "English",  booktitle = "Proceedings of the 25th International Systems And Software Product Line Conference",  note      = "25TH ACM INTERNATIONAL SYSTEMS AND SOFTWARE PRODUCT LINE CONFERENCE, SPLC ; Conference date: 06-09-2021", }


@article{e12720cef3ee4272b9412c216818f46b,  title     = "Empirical Assessment of Generating Adversarial Configurations for Software Product Lines",  abstract  = "Software product line (SPL) engineering allows the derivation ofproducts tailored to stakeholders{\textquoteright} needs through the setting of a large numberof configuration options.Unfortunately, options and their interactions create a huge configurationspace which is either intractable or too costly to explore exhaustively. Insteadof covering all products, machine learning (ML) approximates the set of ac-ceptable products (e.g.,successful builds, passing tests) out of a training set (asample of configurations). However, ML techniques can make prediction errorsyielding non-acceptable products wasting time, energy and other resources.We applyadversarial machine learning techniquesto the world of SPLs andcraft new configurations faking to be acceptable configurations but that arenot and vice-versa. It allows to diagnose prediction errors and take appropriateactions. We develop two adversarial configuration generators on top of state-of-the-art attack algorithms and capable of synthesizing configurations thatare both adversarial and conform to logical constraints.We empirically assess our generators within two case studies: an industrialvideo synthesizer (MOTIV) and an industry-strength, open-source Web-appconfigurator (JHipster). For the two cases, our attacks yield (up to) a 100%misclassification rate without sacrificing the logical validity of adversarial con-figurations. This work lays the foundations of a quality assurance frameworkfor ML-based SPLs.",  keywords  = "ligne de produits logiciels, syst{\`e}mes configurables, variabilit{\'e} logicielle, test logiciel, machine learning, assurance qualit{\'e}, Software product line, Configurable systems, Software variability, Software testing, machine learning, Quality assurance, Machine learning, Configurable system",  author    = "Paul Temple and Gilles Perrouin and Mathieu Acher and Battista Biggio and Jean-Marc J{\'e}z{\'e}quel and Fabio Roli",  note      = "Funding Information: Gilles Perrouin is an FNRS Research Associate. This research was partly supported by EOS Verilearn project grant no. O05518F-RG03. This research was also funded by the ANR-17-CE25-0010-01 VaryVary project. Funding Information: Gilles Perrouin is an FNRS Research Associate. This research was partly supported by EOS Verilearn project grant no. O05518F-RG03. This research was also funded by the ANR-17-CE25-0010-01 VaryVary project. Publisher Copyright: {\textcopyright} 2021, The Author(s), under exclusive licence to Springer Science+Business Media, LLC part of Springer Nature.",  year      = "2021",  month     = jan,  doi       = "10.1007/s10664-020-09915-7",  language  = "English",  volume    = "26",  pages     = "1--49",  journal   = "Empirical Software Engineering ",  issn      = "1382-3256",  publisher = "Springer",  number    = "1", }


@article{bded27d3ed10470b986c96764e2fe7d2,  title     = "Ethical Adversaries: Towards Mitigating Unfairness with Adversarial Machine Learning",  abstract  = "Machine learning is being integrated into a growing number of critical systems with far-reaching impacts on society. Unexpected behaviour and unfair decision processes are coming under increasing scrutiny due to this widespread use and its theoretical considerations. Individuals, as well as organisations, notice, test, and criticize unfair results to hold model designers and deployers accountable. We offer a framework that assists these groups in mitigating unfair representations stemming from the training datasets. Our framework relies on two inter-operating adversaries to improve fairness. First, a model is trained with the goal of preventing the guessing of protected attributes' values while limiting utility losses. This first step optimizes the model's parameters for fairness. Second, the framework leverages evasion attacks from adversarial machine learning to generate new examples that will be misclassified. These new examples are then used to retrain and improve the model in the first step. These two steps are iteratively applied until a significant improvement in fairness is obtained. We evaluated our framework on well-studied datasets in the fairness literature - including COMPAS - where it can surpass other approaches concerning demographic parity, equality of opportunity and also the model's utility. We investigated the trade-offs between these targets in terms of model hyperparameters and also illustrated our findings on the subtle difficulties when mitigating unfairness and highlight how our framework can assist model designers.",  author    = "Pieter Delobelle and Paul Temple and Gilles Perrouin and Beno{\^i}t Fr{\'e}nay and Patrick Heymans and Bettina Berendt",  note      = "DBLP's bibliographic metadata records provided through http://dblp.org/search/publ/api are distributed under a Creative Commons CC0 1.0 Universal Public Domain Dedication. Although the bibliographic metadata records are provided consistent with CC0 1.0 Dedication, the content described by the metadata records is not. Content may be subject to copyright, rights of privacy, rights of publicity and other restrictions.",  year      = "2021",  month     = may,  day       = "27",  doi       = "10.1145/3468507.3468513",  language  = "English",  volume    = "23",  pages     = "32--41",  journal   = "SIGKDD Explorations",  issn      = "1931-0153",  publisher = "ACM Press",  number    = "1", }


@misc{d314ef7b866843cf9869a322c43b2834,  title    = "Featured Scents: Assessing Architectural Smells for Self-Adaptive Systems at Runtime",  abstract = "Self-adaptive systems (SAS) change their behavior and structure at runtime to answer the changes in their environment. Such systems combine different architectural fragments or solutions via feature binding/unbinding at runtime. Moreover, this combination may negatively impact the system's architectural qualities, exhibiting architectural bad smells (ABS). These issues are challenging to detect in the code due to the combinatorial explosion of interactions amongst features. Since SAS do not document these features in their source code, design time smell detection ignores them and risks reporting spurious smells. This paper assesses this risk to understand how ABS occur at runtime for different feature combinations. We look for cyclic dependency and hub-like ABS in various runtime adaptations of two SAS, Adasim and mRubis. Our results indicate that architectural smells are feature-dependent and that their number is highly variable from one adaptation to the other. Some ABS appear in all runtime adaptations, some in only a few. We discuss the reasons behind these architectural smells for each system and draw some lessons for targeted analyses of ABS in SAS.",  author   = "Santos, {Edilton Lima dos} and Schobbens, {Pierre Yves} and Gilles Perrouin",  year     = "2021",  month    = nov,  day      = "9",  doi      = "10.5281/zenodo.5657046",  language = "English",  type     = "Other", }


@inproceedings{081eccf9930d4b1196fe5271a67ffbac,  title     = "Summary of Search-based Crash Reproduction using Behavioral Model Seeding",  abstract  = "This is an extended abstract of the article: Pouria Derakhshanfar, Xavier Devroey, Gilles Perrouin, Andy Zaidman and Arie van Deursen. 2019. Search-based crash reproduction using behavioural model seeding. In: Software Testing, Verification and Reliability (May 2020). http://doi.org/10.1002/stvr.1733.",  keywords  = "crash reproduction, model seeding, search-based software testing, seed learning",  author    = "Pouria Derakhshanfar and Xavier Devroey and Gilles Perrouin and Andy Zaidman and Deursen, {Arie Van}",  note      = "Publisher Copyright: {\textcopyright} 2021 IEEE. Publisher Copyright: {\textcopyright} 2021 IEEE.; 14th IEEE International Conference on Software Testing, Verification and Validation, ICST 2021 ; Conference date: 12-04-2021 Through 16-04-2021",  year      = "2021",  month     = apr,  doi       = "10.1109/ICST49551.2021.00039",  language  = "English",  series    = "2021 14th IEEE Conference on Software Testing, Verification and Validation (ICST)",  publisher = "Institute of Electrical and Electronics Engineers Inc.",  pages     = "281",  booktitle = "Proceedings - 2021 IEEE 14th International Conference on Software Testing, Verification and Validation, ICST 2021",  address   = "United States", }


@inproceedings{d2626b47ae36477e816abcc3e05a8edd,  title     = "VaryMinions: Leveraging RNNs to Identify Variants in Event Logs",  abstract  = "Business processes have to manage variability in their execution, eg to deliver the correct building permit in different municipalities. This variability is visible in event logs, where sequences of events are shared by the core process (building permit authorisation) but may also be specific to each municipality. To rationalise resources (eg derive a configurable business process capturing all municipalities' permit variants) or to debug anomalous behaviours, it is mandatory to identify to which variant a given trace belongs. This paper supports this task by training Long Short Term Memory (LSTMs) and Gated Recurrent Units (GRUs) algorithms on two datasets: a configurable municipality and a travel expenses workflow. We demonstrate that variability can be identified accurately (>87%) and discuss the challenges of learning highly entangled variants.",  author    = "Sophie Fortz and Paul Temple and Xavier DEVROEY and Patrick HEYMANS and GILLES PERROUIN",  year      = "2021",  language  = "English",  booktitle = "5th International Workshop on Machine Learning Techniques for Software Quality Evolution",  publisher = "ACM Press",  address   = "United States", }


@inproceedings{a8ed38612105412eb5d7865ba911d541,  title     = "An SMT-Based Concolic Testing Tool for Logic Programs",  abstract  = "Concolic testing combines symbolic and concrete execution to generate test cases that achieve a good program coverage. Its benefits have been demonstrated for more than 15 years in the case of imperative programs. In this work, we present a concolic-based test generation tool for logic programs which exploits SMT-solving for constraint resolution.",  author    = "Sophie Fortz and Fred Mesnard and Etienne Payet and Gilles Perrouin and Wim Vanhoof and Germ{\'a}n Vidal",  note      = "Funding Information: Third author is a research associate at FNRS that also supports this work (O05518FRG03). The last author is partially supported by the EU (FEDER) and the Spanish MCI/AEI under grants TIN2016-76843-C4-1-R/PID2019-104735RB-C41 and by the Generalitat Valenciana under grant Prometeo/2019/098 (DeepTrust). Publisher Copyright: {\textcopyright} 2020, Springer Nature Switzerland AG. Copyright: Copyright 2020 Elsevier B.V., All rights reserved.; 15th International Symposium on Functional and Logic Programming, FLOPS 2020 ; Conference date: 14-09-2020 Through 16-09-2020",  year      = "2020",  doi       = "10.1007/978-3-030-59025-3_13",  language  = "English",  isbn      = "9783030590246",  series    = "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",  publisher = "Springer Science and Business Media Deutschland GmbH",  pages     = "215--219",  editor    = "Keisuke Nakano and Konstantinos Sagonas",  booktitle = "Functional and Logic Programming",  address   = "Germany", }


@inproceedings{a660730bdc8943518cde915cce92e382,  title     = "Ethical Adversaries: Towards Mitigating Unfairness with Adversarial Machine Learning",  abstract  = " Machine learning is being integrated into a growing number of critical systems with far-reaching impacts on society. Unexpected behaviour and unfair decision processes are coming under increasing scrutiny due to this widespread use and its theoretical considerations. Individuals, as well as organisations, notice, test, and criticize unfair results to hold model designers and deployers accountable. We offer a framework that assists these groups in mitigating unfair representations stemming from the training datasets. Our framework relies on two inter-operating adversaries to improve fairness. First, a model is trained with the goal of preventing the guessing of protected attributes' values while limiting utility losses. This first step optimizes the model's parameters for fairness. Second, the framework leverages evasion attacks from adversarial machine learning to generate new examples that will be misclassified. These new examples are then used to retrain and improve the model in the first step. These two steps are iteratively applied until a significant improvement in fairness is obtained. We evaluated our framework on well-studied datasets in the fairness literature -- including COMPAS -- where it can surpass other approaches concerning demographic parity, equality of opportunity and also the model's utility. We also illustrate our findings on the subtle difficulties when mitigating unfairness and highlight how our framework can assist model designers. ",  keywords  = "cs.LG, cs.AI, stat.ML",  author    = "Pieter Delobelle and Paul Temple and Gilles Perrouin and Beno{\^i}t Fr{\'e}nay and Patrick Heymans and Bettina Berendt",  note      = "15 pages, 3 figures, 1 table; Bias and Fairness in AI (BIAS 2020), BIAS 2020 ; Conference date: 18-09-2020 Through 18-09-2020",  year      = "2020",  month     = may,  day       = "14",  language  = "English",  booktitle = "1st workshop on Bias and Fairness in AI, co-located with ECMLPKDD 2020",  url       = "https://sites.google.com/view/bias-2020", }


@inproceedings{e46a6efc2e7a4fd5a422b3815d840309,  title     = "Extended abstract: Test them all, is it worth it? Assessing configuration sampling on the JHipster Web development stack",  abstract  = "This is an extended abstract of the article: Axel Halin, Alexandre Nuttinck, Mathieu Acher, Xavier Devroey, Gilles Perrouin, and Benoit Baudry. 2018. Test them all, is it worth it? Assessing configuration sampling on the JHipster Web development stack. In Empirical Software Engineering (17 Jul 2018). https://doi.org/10.1007/s10664-018-9635-4.",  keywords  = "case study, configuration sampling, JHipster, software testing, variability-intensive systems",  author    = "Alexandre Nuttinck and Mathieu Acher and Xavier Devroey and Gilles Perrouin and Benoit Baudry and Axel Halin",  note      = "Publisher Copyright: {\textcopyright} 2020 ACM. Copyright: Copyright 2020 Elsevier B.V., All rights reserved.; 24th ACM Conference on Systems and Software Product Line, SPLC 2020 ; Conference date: 19-10-2020 Through 23-10-2020",  year      = "2020",  month     = oct,  day       = "19",  doi       = "10.1145/3382025.3414985",  language  = "English",  series    = "ACM International Conference Proceeding Series",  publisher = "ACM Press",  pages     = "302",  editor    = "Shaukat Ali and Assuncao, {Wesley K.G.} and Thorsten Berger and Carlos Cetina and Philippe Collet and Jose Galindo and Paul Gazzillo and Lukas Linsbauer and Lopez-Herrejon, {Roberto Erick} and Sarah Nadi and Sandro Schulze and Salvador Trujillo",  booktitle = "Proceedings of the 24th ACM Conference on Systems and Software Product Line",  address   = "United States", }


@conference{3911da99c1cc44808a1c95c955b31b52,  title    = "MALTESQUE 2019 Workshop Summary",  abstract = "Welcome to the third edition of the workshop on Machine Learn- ing Techniques for Software Quality Evaluation (MaLTeSQuE 2019), held in Tallinn, Estonia, August 27th, 2019, co-located with ESEC / FSE 2019. This year MALTESQUE merged with the MASES (Machine Learning and Software Engineering in Symbiosis) work- shop, co-located with the ASE 2018 conference. Ten papers from all over the world were submitted, seven of them were accepted. The program also featured a keynote by Lionel Briand on the use of machine learning to improve software testing.",  author   = "Fontana, {Francesca Arcelli} and Gilles Perrouin and Apostolos Ampatzoglou and Mathieu Acher and Bartosz Walter and Maxime Cordy and Fabio Palomba and Xavier Devroey",  year     = "2020",  month    = jan,  day      = "22",  doi      = "10.1145/3375572.3375582",  language = "English",  pages    = "34--35", }


@article{afc0c8158cd04e478fecd133c55627ec,  title     = "Search-based crash reproduction using behavioural model seeding",  abstract  = "Search-based crash reproduction approaches assist developers during debugging by generating a test case, which reproduces a crash given its stack trace. One of the fundamental steps of this approach is creating objects needed to trigger the crash. One way to overcome this limitation is seeding: using information about the application during the search process. With seeding, the existing usages of classes can be used in the search process to produce realistic sequences of method calls, which create the required objects. In this study, we introduce behavioural model seeding: a new seeding method that learns class usages from both the system under test and existing test cases. Learned usages are then synthesized in a behavioural model (state machine). Then, this model serves to guide the evolutionary process. To assess behavioural model seeding, we evaluate it against test seeding (the state-of-the-art technique for seeding realistic objects) and no seeding (without seeding any class usage). For this evaluation, we use a benchmark of 122 hard-to-reproduce crashes stemming from six open-source projects. Our results indicate that behavioural model seeding outperforms both test seeding and no seeding by a minimum of 6% without any notable negative impact on efficiency.",  keywords  = "crash reproduction, search-based software testing, seed learning",  author    = "Pouria Derakhshanfar and Xavier DEVROEY and Gilles Perrouin and Andy Zaidman and {van Deursen}, Arie",  note      = "Funding Information: We would like to thank Annibale Panichella for his help and comments during the implementation of Botsing and the writing of this paper. This research was partially funded by the EU Horizon 2020 ICT‐10‐2016‐RIA “STAMP” project (731529) and the Dutch 4TU project “Big Software on the Run” project. Funding Information: We would like to thank Annibale Panichella for his help and comments during the implementation of Botsing and the writing of this paper. This research was partially funded by the EU Horizon 2020 ICT-10-2016-RIA ?STAMP? project (731529) and the Dutch 4TU project ?Big Software on the Run? project. Publisher Copyright: {\textcopyright} 2020 The Authors. Software Testing, Verification & Reliability published by John Wiley & Sons Ltd",  year      = "2020",  month     = may,  day       = "1",  doi       = "https://doi.org/10.1002/stvr.1733",  language  = "English",  volume    = "30",  journal   = "Software Testing, Verification and Reliability",  issn      = "0960-0833",  publisher = "John Wiley & Sons, Ltd",  number    = "3", }


@inproceedings{55c2599075684241b624325968573601,  title     = "STARS: Software Technology for Adaptable and Reusable Systems PhD Research Project",  abstract  = "Dynamically Adaptive Systems (DAS) modify their behaviours in response to (sometimes unpredictable) changes in their environment or to the evolution of their own abilities (sensors and actuators). To support adaptation, a reference architecture (such as the MAPE-K model) is paramount. Yet, this is not sufficient as challenges concerning the fine-grained variability management and testability remain. The STARS Ph.D. project aims at developing a variability and context-aware architectural model for DAS that particularly takes into account testability. In particular, we want to adapt tests at runtime in order to assess and prevent the impact of inappropriate adaptations.",  keywords  = "MAPE-K loop, Self-adapting, Software architecture, Software test",  author    = "{Lima dos Santos}, Edilton and Gilles Perrouin and Schobbens, {Pierre Yves}",  year      = "2020",  month     = feb,  day       = "5",  doi       = "10.1145/3377024.3377033",  language  = "English",  series    = "PervasiveHealth: Pervasive Computing Technologies for Healthcare",  publisher = "ACM Press",  pages     = "1--2",  editor    = "Maxime Cordy and Mathieu Acher and Danilo Beuche and Gunter Saake",  booktitle = "Proceedings - VaMoS 2020",  address   = "United States",  note      = "14th International Working Conference on Variability Modelling of Software-Intensive Systems, VaMoS 2020 ; Conference date: 05-02-2020 Through 07-02-2020", }


@inproceedings{3585e533ad0a48a4982576b211af9e16,  title     = "AbsCon: A Test Concretizer for Model-based Testing",  abstract  = "Test definition and execution is an essential but time-consuming task during system development. To speed up the process, model-based testing and other related approaches propose to generate/write abstract test cases and to concretize them using either transformations, an adapter, or a mixture of the two. QTaste is an industrial data-driven test case definition and execution environment used to perform black-box testing on various kinds of systems. QTaste's test cases are manually written in Python and use an adapter, called test API, to execute operations on the System Under Test (SUT) interfaces. In this paper, we describe AbsCon (Abstract test case Concretizer), a plugin used to generate test cases executable in QTaste based on their definition: i.e., sequences of abstract actions and assertions. AbsCon uses programmer friendly mappings (written in Python) for the SUT's interfaces, actions, and assertions, to generate standard test cases in QTaste format. Rather than having a complete model-based testing transformation chain, the plugin is bridging the gap between existing model-based test case generation tools and an industrial test case execution system using a mix of transformation and adaptation.",  keywords  = "QTaste, Software testing tool, Test case concretization",  author    = "J{\'e}r{\'e}my Vanhecke and Xavier Devroey and Gilles Perrouin",  note      = "Funding Information: Gilles Perrouin is a research associate at the FNRS. This research was partially funded by the EU Project STAMP ICT-16-10 No.731529, the NIRICT 3TU.BSR (Big Software on the Run) project as well as by the European Regional Development Fund (ERDF) “Ideas for the future Internet” (IDEES) project. Publisher Copyright: {\textcopyright} 2019 IEEE. Copyright: Copyright 2020 Elsevier B.V., All rights reserved.; 12th IEEE International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2019 ; Conference date: 22-04-2019 Through 27-07-2019",  year      = "2019",  month     = apr,  doi       = "10.1109/icstw.2019.00027",  language  = "English",  series    = "Proceedings - 2019 IEEE 12th International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2019",  publisher = "IEEE",  pages     = "15--22",  booktitle = "Proceedings - 2019 IEEE 12th International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2019", }


@inbook{f2503c71e48740f29c98aa568046a1a6,  title     = "A Decade of Featured Transition Systems",  abstract  = "Variability-intensive systems (VIS) form a large and heterogeneous class of systems whose behaviour can be modified by enabling or disabling predefined features. Variability mechanisms allows the adaptation of software to the needs of their users and the environment. However, VIS verification and validation (V&V) is challenging: the combinatorial explosion of the number of possible behaviours and undesired feature interactions are amongst such challenges. To tackle them, Featured Transitions Systems (FTS) were proposed a decade ago to model and verify the behaviours of VIS. In an FTS, each transition is annotated with a combination of features determining which variants can execute it. An FTS can model all possible behaviours of a given VIS. This compact model enabled us to create efficient V&V algorithms taking advantage of the behaviours shared amongst features resulting in a reduction of the V&V effort by several orders of magnitude. In this paper, we will cover the formalism, its applications and sketch promising research directions. ",  keywords  = "Variability-intensive systems, Model-checking, Modeling, Testing",  author    = "Maxime Cordy and Xavier Devroey and Axel Legay and Gilles Perrouin and Andreas Classen and Patrick Heymans and Pierre-Yves Schobbens and Jean-Fran{\c c}ois Raskin",  year      = "2019",  month     = oct,  doi       = "10.1007/978-3-030-30985-5_18",  language  = "English",  isbn      = "978-3-030-30984-8",  series    = "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",  publisher = "Springer Verlag",  pages     = "285--312",  editor    = "{ter Beek}, M. and A. Fantechi and L. Semini",  booktitle = "From Software Engineering to Formal Methods and Tools, and Back",  address   = "Germany", }


@conference{ab1c0581098d493b92ecae0d609c5fa8,  title    = "Customizing Adversarial Machine Learning to test Deep Learning techniques",  author   = "Paul Temple and Gilles Perrouin and Beno{\^i}t Fr{\'e}nay and Pierre-Yves Schobbens",  year     = "2019",  month    = may,  day      = "28",  language = "English",  note     = "1st Workshop on Deep Learning &lt;=&gt; Testing, DeepTest ; Conference date: 28-05-2019 Through 28-05-2019",  url      = "https://deeptestconf.github.io/", }


@article{f74535758e12440d8826fb9812bbdf2b,  title     = "Editorial to the theme section on model-based testing",  abstract  = "This theme on model-based testing (MBT) was organized in the context of advances in model-based testing (A-MOST) workshop series. Now in its fourteenth edition, this workshop covers all aspects of MBT from theoretical developments to industrial implementations. Following the twelfth edition in Chicago (2016), we invited the MBT community to submit their latest and finest research in the field via an open call. We selected seven articles that are presented in this theme section.",  author    = "Mike Papadakis and Shaukat Ali and Gilles Perrouin",  note      = "Publisher Copyright: {\textcopyright} 2018, Springer-Verlag GmbH Germany, part of Springer Nature. Copyright: Copyright 2019 Elsevier B.V., All rights reserved.",  year      = "2019",  month     = apr,  day       = "4",  doi       = "10.1007/s10270-018-0699-9",  language  = "English",  volume    = "18",  pages     = "795--796",  journal   = "Software and Systems Modeling",  issn      = "1619-1366",  publisher = "Springer Verlag",  number    = "2", }


@inproceedings{fb7eb846a627452c8f17e135151716a7,  title     = "Preface to the thirteenth workshop on variability modelling of software-intensive systems",  author    = "Gilles Perrouin and Danny Weyns",  year      = "2019",  month     = feb,  day       = "6",  doi       = "10.1145/3302333.3302334",  language  = "English",  series    = "ACM International Conference Proceeding Series",  publisher = "ACM Press",  booktitle = "Proceedings of the 13th International Workshop on Variability Modelling of Software-Intensive Systems, VAMOS 2019",  address   = "United States",  note      = "13th International Workshop on Variability Modelling of Software-Intensive Systems, VAMOS 2019 ; Conference date: 06-02-2019", }


@article{22b795a17d2544d2a23ae7ec2456885e,  title     = "Test them all, is it worth it? Assessing configuration sampling on the JHipster Web development stack",  abstract  = "Many approaches for testing configurable software systems start from the same assumption: it is impossible to test all configurations. This motivated the definition of variability-aware abstractions and sampling techniques to cope with large configuration spaces. Yet, there is no theoretical barrier that prevents the exhaustive testing of all configurations by simply enumerating them if the effort required to do so remains acceptable. Not only this: we believe there is a lot to be learned by systematically and exhaustively testing a configurable system. In this case study, we report on the first ever endeavour to test all possible configurations of the industry-strength, open source configurable software system JHipster, a popular code generator for web applications. We built a testing scaffold for the 26,000+ configurations of JHipster using a cluster of 80 machines during 4 nights for a total of 4,376 hours (182 days) CPU time. We find that 35.70% configurations fail and we identify the feature interactions that cause the errors. We show that sampling strategies (like dissimilarity and 2-wise): (1) are more effective to find faults than the 12 default configurations used in the JHipster continuous integration; (2) can be too costly and exceed the available testing budget. We cross this quantitative analysis with the qualitative assessment of JHipster{\textquoteright}s lead developers.",  keywords  = "Case study, Configuration sampling, JHipster, Software testing, Variability-intensive system",  author    = "Axel Halin and Alexandre Nuttinck and Mathieu Acher and Xavier Devroey and Gilles Perrouin and Benoit Baudry",  year      = "2019",  month     = apr,  day       = "15",  doi       = "10.1007/s10664-018-9635-4",  language  = "English",  volume    = "24",  pages     = "674--717",  journal   = "Empirical Software Engineering ",  issn      = "1382-3256",  publisher = "Springer",  number    = "2", }


@inproceedings{1b4dc6fad1ab4dbc8517466e2356a51c,  title     = "Towards quality assurance of software product lines with adversarial configurations",  abstract  = "Software product line (SPL) engineers put a lot of effort to ensure that, through the setting of a large number of possible configuration options, products are acceptable and well-tailored to customers' needs. Unfortunately, options and their mutual interactions create a huge configuration space which is intractable to exhaustively explore. Instead of testing all products, machine learning is increasingly employed to approximate the set of acceptable products out of a small training sample of configurations. Machine learning (ML) techniques can refine a software product line through learned constraints and a priori prevent non-acceptable products to be derived. In this paper, we use adversarial ML techniques to generate adversarial configurations fooling ML classifiers and pinpoint incorrect classifications of products (videos) derived from an industrial video generator. Our attacks yield (up to) a 100% misclassification rate and a drop in accuracy of 5%. We discuss the implications these results have on SPL quality assurance.",  keywords  = "Machine learning, Quality assurance, Software product line, Software testing, Software variability",  author    = "Paul Temple and Mathieu Acher and Gilles Perrouin and Battista Biggio and J{\'e}z{\'e}quel, {Jean Marc} and Fabio Roli",  note      = "Funding Information: This work has been partially funded by the Ministry of Science and Technology of Spain through ECLIPSE (RTI2018-094283-B-C33), the Junta de Andaluc?a via the PIRAMIDE and METAMORFOSIS projects, the European Regional Development Fund (ERDF/FEDER), and the MINECO Juan de la Cierva postdoctoral program. The authors would like to thank the C?tedra de Telef?nica {"}Inteligencia en la Red{"} of the Universidad de Sevilla for its support. Funding Information: ∗Gilles Perrouin is an FNRS Research Associate. This research was partly supported by EOS Verilearn project grant no. O05518F-RG03. This research was also funded by the ANR-17-CE25-0010-01 VaryVary project. Publisher Copyright: {\textcopyright} 2019 Association for Computing Machinery. Copyright: Copyright 2019 Elsevier B.V., All rights reserved.; 23rd International Systems and Software Product Line Conference, SPLC 2019, co-located with the 13th European Conference on Software Architecture, ECSA 2019 ; Conference date: 09-09-2019 Through 13-09-2019",  year      = "2019",  month     = sep,  day       = "9",  doi       = "10.1145/3336294.3336309",  language  = "English",  series    = "ACM International Conference Proceeding Series",  publisher = "ACM Press",  editor    = "Thorsten Berger and Philippe Collet and Laurence Duchien and Thomas Fogdal and Patrick Heymans and Timo Kehrer and Jabier Martinez and Raul Mazo and Leticia Montalvillo and Camille Salinesi and Xhevahire Ternava and Thomas Thum and Tewfik Ziadi",  booktitle = "SPLC 2019 - 23rd International Systems and Software Product Line Conference",  address   = "United States", }


@inproceedings{93027cb8375246c2b191508a3201e87d,  title     = "Uniform Sampling of SAT Solutions for Configurable Systems: Are We There Yet?",  abstract  = "Uniform or near-uniform generation of solutions for large satisfiability formulas is a problem of theoretical and practical interest for the testing community. Recent works proposed two algorithms (namely UniGen and QuickSampler) for reaching a good compromise between execution time and uniformity guarantees, with empirical evidence on SAT benchmarks. In the context of highly-configurable software systems (e.g., Linux), it is unclear whether UniGen and QuickSampler can scale and sample uniform software configurations. In this paper, we perform a thorough experiment on 128 real-world feature models. We find that UniGen is unable to produce SAT solutions out of such feature models. Furthermore, we show that QuickSampler does not generate uniform samples and that some features are either never part of the sample or too frequently present. Finally, using a case study, we characterize the impacts of these results on the ability to find bugs in a configurable system. Overall, our results suggest that we are not there: more research is needed to explore the cost-effectiveness of uniform sampling when testing large configurable systems.",  keywords  = "Software product lines, Variability modeling, SAT, Configurable systems, Software testing, Uniform sampling",  author    = "Quentin Plazar and Mathieu Acher and Gilles Perrouin and Xavier Devroey and Maxime Cordy",  year      = "2019",  month     = apr,  day       = "1",  doi       = "10.1109/ICST.2019.00032",  language  = "English",  isbn      = "9781728117355",  series    = "Proceedings - 2019 IEEE 12th International Conference on Software Testing, Verification and Validation, ICST 2019",  pages     = "240--251",  booktitle = "Proceedings - 2019 IEEE 12th International Conference on Software Testing, Verification and Validation, ICST 2019",  note      = "12th IEEE International Conference on Software Testing, Verification and Validation, ICST 2019 ; Conference date: 22-04-2019 Through 27-04-2019", }


@inbook{35e2484ea660465db888f229ebdf2b44,  title     = "Welcome from the chairs",  author    = "Fontana, {Francesca Arcelli} and Gilles Perrouin and Apostolos Ampatzoglou and Mathieu Acher and Bartosz Walter and Maxime Cordy and Fabio Palomba and Xavier Devroey",  year      = "2019",  month     = aug,  day       = "27",  language  = "English",  isbn      = "978-1-4503-6855-1",  pages     = "III--IV",  editor    = "{Arcelli Fontana}, Francesca and Bartosz Walter and Apostolos Ampatzoglou and Fabio Palomba and Gilles Perrouin and Mathieu Acher and Maxime Cordy and Xavier Devroey",  booktitle = "MaLTeSQuE 2019",  publisher = "ACM Press",  address   = "United States",  note      = "3rd ACM SIGSOFT International Workshop on Machine Learning Techniques for Software Quality Evaluation, MaLTeSQuE 2019, co-located with ESEC/FSE 2019 ; Conference date: 27-08-2019", }


@article{22f72a1597284e4381f2d1b41684cf85,  title     = "Model-based mutant equivalence detection using automata language equivalence and simulations",  abstract  = "Mutation analysis is a popular technique for assessing the strength of test suites. It relies on the mutation score, which indicates their fault-revealing potential. Yet, there are mutants whose behaviour is equivalent to the original system, wasting analysis resources and preventing the satisfaction of a 100\% mutation score. For finite behavioural models, the Equivalent Mutant Problem (EMP) can be transformed to the language equivalence problem of non-deterministic finite automata for which many solutions exist. However, these solutions are quite expensive, making computation unbearable when used for tackling the EMP. In this paper, we report on our assessment of a state-of-the-art exact language equivalence tool and two heuristics we proposed. We used 12 models, composed of (up to) 15,000 states, and 4,710 mutants. We introduce a random and a mutation-biased simulation heuristics, used as baselines for comparison. Our results show that the exact approach is often more than ten times faster in the weak mutation scenario. For strong mutation, our biased simulations can be up to 1,000 times faster for models larger than 300 states, while limiting the error of misclassifying non-equivalent mutants as equivalent to 8\% on average. We therefore conclude that the approaches can be combined for improved efficiency.",  keywords  = "model-based mutation analysis, automata language equivalence, random simulations, Model-based mutation analysis, Random simulations, Automata language equivalence",  author    = "Xavier Devroey and Gilles Perrouin and Mike Papadakis and Axel Legay and Pierre-Yves Schobbens and Patrick Heymans",  note      = "Funding Information: We would like to thank Damien Pous for his support on the HKC tool. This research was partially funded by the EU Horizon 2020 ICT-10-2016-RIA {"}STAMP{"} project (No.731529) and the Dutch 4TU project “Big Software on the Run” as well as by the European Regional Development Fund ( ERDF ) “Ideas for the future Internet” (IDEES) project (No. ETR121200001375). Publisher Copyright: {\textcopyright} 2018 Elsevier Inc. Copyright: Copyright 2020 Elsevier B.V., All rights reserved.",  year      = "2018",  month     = jul,  day       = "1",  doi       = "10.1016/j.jss.2018.03.010",  language  = "English",  volume    = "141",  pages     = "1--15",  journal   = "Journal of Systems and Software",  issn      = "0164-1212",  publisher = "Elsevier", }


@conference{8bb472aa72f043edb70aaa90789697eb,  title    = "Model-based Mutation Operators for Timed Systems: A Taxonomy and Research Agenda",  abstract = "Mutation testing relies on the principle of artificially injecting faults in systems to create mutants, in order to either assess the sensitivity of existing test suites, or generate test cases that are able to find real faults. Mutation testing has been employed in a variety of application areas and at various levels of abstraction (code and models). In this paper, we focus on model-based mutation testing for timed systems. In order to cartography the field, we provide a taxonomy of mutation operators and discuss their usages on various formalisms, such as timed automata or synchronous languages. We also delineate a research agenda for the field addressing mutation costs, the impact of delays in operators specification and mutation equivalence. ",  keywords = "model-based testing, timed automata, real-time systems, mutation operators taxonomy, Mutation operators taxonomy, Model-based testing, Timed automata, Real-time systems, Mutation testing",  author   = "{Ortiz Vega}, {James Jerson} and Gilles Perrouin and Moussa Amrani and Pierre-Yves Schobbens",  year     = "2018",  month    = jul,  day      = "1",  doi      = "10.1109/QRS.2018.00045",  language = "English",  pages    = "325--332",  note     = "18th IEEE International Conference on Quality, Reliability, and Security, QRS ; Conference date: 16-07-2018 Through 20-07-2018", }


@conference{28b95d2e54bb4b56b016f05ab3c41ca1,  title    = "Software Testing Research",  author   = "Gilles Perrouin",  note     = "This poster was realised for the kick-off event of NaDI and therefore has no publisher per se. ; NaDI - l'Intelligence Artificielle : enjeux et d{\'e}fis. ; Conference date: 23-10-2018 Through 23-10-2018",  year     = "2018",  language = "English", }


@article{fbda7773a4fe4d2183d38e139a90227e,  title    = "Welcome from the MASES 2018 chairs",  author   = "Gilles Perrouin and Mathieu Acher and Maxime Cordy and Xavier Devroey",  year     = "2018",  month    = sep,  day      = "3",  language = "English",  pages    = "III",  journal  = "Proceedings of the International Workshop on Machine Learning and Software Engineering in Symbiosis, co-located with ASE 2018",  note     = "1st International Workshop on Machine Learning and Software Engineering in Symbiosis, MASES 2018, co-located with ASE 2018 Conference ; Conference date: 03-09-2018", }


@inproceedings{5073565ab73e407d8cc40bafbda5096e,  title     = "Automata Language Equivalence vs. Simulations for Model-based Mutant Equivalence: An Empirical Evaluation",  abstract  = "Mutation analysis is a popular test assessment method. It relies on the mutation score, which indicates how many mutants are revealed by a test suite. Yet, there are mutants whose behaviour is equivalent to the original system, wasting analysis resources and preventing the satisfaction of the full (100%) mutation score. For finite behavioural models, the Equivalent Mutant Problem (EMP) can be addressed through language equivalence of non-deterministic finite automata, which is a well-studied, yet computationally expensive, problem in automata theory. In this paper, we report on our preliminary assessment of a state-of-the-art exact language equivalence tool to handle the EMP against 3 models of size up to 15,000 states on 1170 mutants. We introduce random and mutation-biased simulation heuristics as baselines for comparison. Results show that the exact approach is often more than ten times faster in the weak mutation scenario. For strong mutation, our biased simulations are faster for models larger than 300 states. They can be up to 1,000 times faster while limiting the error of misclassifying non-equivalent mutants as equivalent to 10% on average. We therefore conclude that the approaches can be combined for improved efficiency. ",  keywords  = "Model-Based Mutation Analysis, Automata Language Equivalence, Random Simulations, Model-based mutation analysis, Random simulations, Automata language equivalence",  author    = "Xavier Devroey and Gilles Perrouin and Mike Papadakis and Axel Legay and Pierre Schobbens and Patrick Heymans",  year      = "2017",  month     = may,  day       = "15",  doi       = "10.1109/ICST.2017.46",  language  = "English",  series    = "2017 IEEE International Conference on Software Testing, Verification and Validation (ICST)",  publisher = "IEEE",  pages     = "424--429",  booktitle = "Proceedings - 10th IEEE International Conference on Software Testing, Verification and Validation, ICST 2017",  note      = "10th IEEE International Conference on Software Testing, Verification and Validation (ICST 2017), ICST 2017 ; Conference date: 13-03-2017 Through 18-03-2017",  url       = "http://aster.or.jp/conference/icst2017/", }


@inbook{9aa36410a61b4da2a2900a477da315dc,  title     = "Engineering Configuration Graphical User Interfaces from Variability Models",  abstract  = "In the past, companies produced large amounts of products through mass production lines. Advantages of such an approach are reduced production costs and time-to-market. While it is (still) appropriate for some goods like food or household items, customer preferences evolve to customised products. In a more and more competitive environment, product customisation is taken to the extreme by companies in order to gain market share. Companies provide customisation tools, more commonly called product configurators, to assist their staff and customers in deciding upon the characteristics of the product to be delivered. Our experience reveals that some existing configurators are implemented in an ad-hoc fashion. This is especially cumbersome when numerous and non-trivial constraints have to be dealt with. For instance, we have observed in two industrial cases that relationships between configuration options are hard-coded and mixed with GUI code. As constraints are scattered in the source code, severe maintenance issues occur.In this chapter, we present a pragmatic and model-driven way to generate configuration GUIs. We rely on feature models to represent and reason about the configuration options and their complex relationships. Once feature models have been elaborated, there is still a need to produce a GUI, including the integration with underlying reasoning mechanisms to control and update the GUI elements. We present a model-view-presenter architecture to design configurators, which separates concerns between a feature model (configuration option modelling), its associated solver (automated reasoning support) and the presentation of the GUI. To fill the gap between feature models and configuration GUIs, the various constructs of the feature model formalism are rendered as GUI elements through model transformations. Those transformations can be parametrised through beautification and view languages to derive specific configuration GUIs. We illustrate our approach on an IPv6 addressing plan configurator.",  author    = "Quentin Boucher and Gilles Perrouin and Jean-Marc Davril and Patrick Heymans",  year      = "2017",  language  = "English",  isbn      = "978-3-319-60945-4",  pages     = "1--46",  editor    = "Jean-S{\'e}bastien Sottet and Frey, {Alfonso Garcia} and Jean Vanderdonckt",  booktitle = "Human Centered Software Product Lines",  publisher = "Springer", }


@inbook{8e6f012b5d3345178c1d609659cfaefc,  title     = "Feature-based Elicitation of Cognitively Efficient Visualizations for SPL Configurations",  abstract  = "Configuring a SPL is a cognitively difficult activity that requires a deepunderstanding of the features and their constraints to be performed effectively.To this end, SPL configurators have been equipped with various visualizations toassist users in their tasks. However, there are many ways to visualize data: theprocess of associating an efficient visualization to a given (configuration) task is neitherwell-understood nor systematically applied, resulting in confusingvisualizations yielding configuration errors. In this chapter, we offer such aprocess, based on theories of the visualization community for data representation. The first step consists in choosing the data to be visualized. Thisselection induces restrictions on the types of visualization that are thencomputed based on the data characteristics and best practices from semiology andvisual languages. Designers can then select an efficientvisualization for the intended task. Our process is supported by feature modelsand FAMILIAR to merge and constrain the set of applicable visualizations.",  author    = "C{\'e}line Sauvage-Thomase and Nicolas Biri and Gilles Perrouin and Nicolas Genon and Patrick Heymans",  year      = "2017",  language  = "English",  isbn      = "978-3-319-60945-4",  pages     = "107--129",  editor    = "Jean-S{\'e}bastien Sottet and Frey, {Alfonso Garcia} and Jean Vanderdonckt",  booktitle = "Human Centered Software Product Lines",  publisher = "Springer Verlag",  address   = "Germany", }


@inproceedings{a7c8319a9bd843d9959e22aef4aaee40,  title     = "On Featured Transition Systems",  abstract  = "Software Product Lines (SPLs) are families of similar software products built from a common set of features. As the number of products of an SPL is potentially exponential in the number of its features, analysing SPLs is harder than for single software. In this invited paper, we synthesise six years of efforts in alleviating SPL verification and testing issues. To this end, we introduced Featured Transition Systems~(FTS) as a compact behavioural model for SPLs. Based on this formalism, we designed verification algorithms and tools allowing to check temporal properties on FTS, thereby assessing the correct behaviour of all the SPL products. We also used FTS to define test coverage and generation techniques for model-driven SPLs. We also successfully employed the formalism in order to foster mutation analysis. We conclude with future directions on the development of FTS for SPL analysis. ",  author    = "Axel Legay and Gilles Perrouin and Xavier Devroey and Maxime Cordy and Pierre-Yves Schobbens and Patrick Heymans",  year      = "2017",  month     = jan,  doi       = "10.1007/978-3-319-51963-0_35",  language  = "English",  isbn      = "9783319519623",  series    = "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",  publisher = "Springer",  pages     = "453--463",  editor    = "Christel Baier and {van den Brand}, Mark and Johann Eder and Mike Hinchey and Tiziana Margaria and Bernhard Steffen",  booktitle = "SOFSEM 2017: Theory and Practice of Computer Science", }


@inproceedings{6755774434a54f888ebd6e5eb6eb1929,  title     = "On quantitative requirements for product lines",  abstract  = "Software Product Line Engineering (SPLE) aims at developing a large number of software systems that share a common and managed set of features [5]. In the past years, it has been an active area in both research and industry. SPLE aims at improving productivity and reducing the time, effort, and cost required to develop a family of products (also called variants). The key point to achieve this goal is to manage the variability among various products of a Software Product Line (SPL). Variability is commonly expressed in terms of features, i.e., units of difference between software products. A product can thus be viewed as a set of features. Dependencies between features are typically represented in a Feature Model (FM) [11], whose ultimate purpose is to define which combinations of features (that is, which products) are valid [16]. Behavior of both the features and the core behavior (i.e., the behavior shared by all products in the line) may be represented by (variants of) state machines [3, 13].",  author    = "Axel Legay and Gilles Perrouin",  note      = "Publisher Copyright: {\textcopyright} 2017 ACM. Copyright: Copyright 2017 Elsevier B.V., All rights reserved.",  year      = "2017",  month     = feb,  day       = "1",  doi       = "10.1145/3023956.3023970",  language  = "English",  isbn      = "978-1-4503-2138-9",  series    = "ACM International Conference Proceeding Series",  publisher = "ACM Press",  pages     = "2--4",  editor    = "Ina Schaefer and {ter Beek}, {Maurice H.} and Norbert Siegmund",  booktitle = "Proceedings - VaMoS 2017",  address   = "United States", }


@article{5191b711732e4a2bbedf24d8c7d0b53b,  title     = "Statistical prioritization for software product line testing: an experience report",  abstract  = "Software product lines (SPLs) are families of software systems sharing common assets and exhibiting variabilities specific to each product member of the family. Commonalities and variabilities are often represented as features organized in a feature model. Due to combinatorial explosion of the number of products induced by possible features combinations, exhaustive testing of SPLs is intractable. Therefore, sampling and prioritization techniques have been proposed to generate sorted lists of products based on coverage criteria or weights assigned to features. Solely based on the feature model, these techniques do not take into account behavioural usage of such products as a source of prioritization. In this paper, we assess the feasibility of integrating usage models into the testing process to derive statistical testing approaches for SPLs. Usage models are given as Markov chains, enabling prioritization of probable/rare behaviours. We used featured transition systems, compactly modelling variability and behaviour for SPLs, to determine which products are realizing prioritized behaviours. Statistical prioritization can achieve a significant reduction in the state space, and modelling efforts can be rewarded by better automation. In particular, we used MaTeLo, a statistical test cases generation suite developed at ALL4TEC. We assess feasibility criteria on two systems: Claroline, a configurable course management system, and Sferion{\texttrademark}, an embedded system providing helicopter landing assistance.",  keywords  = "Prioritization, Software product line testing, Statistical testing",  author    = "Xavier Devroey and Gilles Perrouin and Maxime Cordy and Hamza Samih and Axel Legay and Schobbens, {Pierre Yves} and Patrick Heymans",  year      = "2017",  month     = feb,  day       = "1",  doi       = "10.1007/s10270-015-0479-8",  language  = "English",  volume    = "16",  pages     = "153--171",  journal   = "Software and Systems Modeling",  issn      = "1619-1366",  publisher = "Springer Verlag",  number    = "1", }


@inproceedings{789f0e87bf1e4569800e1c2f98ff3535,  title     = "Testing Variability-Intensive Systems",  abstract  = "Cost-effective techniques to test software in the presence of variability are popular in academia but are not systematically applied in practice yet. This half-day tutorial offers an overview of the state of the art of some of the hottest topics in the field such as (dis)similarity & search-based testing, model-based testing or mutation analysis. We will present the most significant results obtained during the last five years ranging from conceptual foundations to readily usable tools. In particular, we will rely on VIBeS, a model-based open source framework we developed to test product lines behaviour. We will illustrate all these concepts on JHipster, a variability-intensive web development stack. ",  keywords  = "Variability Intensive Systems, Model-Based Testing, VIBeS, Variability-intensive systems, Model-based testing",  author    = "Gilles Perrouin and Xavier Devroey and Maxime Cordy",  note      = "Publisher Copyright: {\textcopyright} 2017 ACM. Copyright: Copyright 2017 Elsevier B.V., All rights reserved.; 21st International Systems and Software Product Line Conference (SPLC '17), SPLC '17 ; Conference date: 25-09-2017 Through 29-09-2017",  year      = "2017",  month     = sep,  day       = "26",  doi       = "10.1145/3106195.3106226",  language  = "English",  volume    = "1",  series    = "Proceedings of the 21st International Systems and Software Product Line Conference - Volume A on - SPLC '17",  publisher = "ACM Press",  pages     = "255--255",  editor    = "Lidia Fuentes and Ebrahim Bagheri and Antonio Ruiz-Cortes and David Benavides and Rafael Capilla and Yingfei Xiong and Jan Bosch and Mathieu Acher and Daniel Schall and Myra Cohen and Javier Troya",  booktitle = "SPLC 2017 - 21st International Systems and Software Product Line Conference, Proceedings",  address   = "United States",  url       = "http://congreso.us.es/splc2017/", }


@inproceedings{c4a7f023d7a348b0a221898cc862d0f0,  title     = "Towards Security-aware Mutation Testing",  abstract  = "Mutation analysis forms a popular software analysis technique that has been demonstrated to be useful in supporting multiple software engineering activities. Yet, the use of mutation analysis in tackling security issues has received little attention. In view of this, we design security aware mutation operators to support mutation analysis. Using a known set of common security vulnerability patterns, we introduce 15 security-aware mutation operators for Java. We then implement them in the PIT mutation engine and evaluate them. Our preliminary results demonstrate that standard PIT operators are unlikely to introduce vulnerabilities similar to ours. We also show that our security-aware mutation operators are indeed applicable and prevalent on open source projects, providing evidence that mutation analysis can support security testing activities. ",  keywords  = "mutation analysis, mutation operators, security testing, PIT, FindBugs, Security Testing, Mutation operators, Mutation analysis",  author    = "Thomas Loise and Xavier Devroey and Gilles Perrouin and Mike Papadakis and Patrick Heymans",  note      = "Publisher Copyright: {\textcopyright} 2017 IEEE. Copyright: Copyright 2017 Elsevier B.V., All rights reserved.; 12th International Workshop on Mutation Analysis (Mutation 2017), Mutation 2017 ; Conference date: 13-03-2017 Through 13-03-2017",  year      = "2017",  month     = mar,  day       = "13",  doi       = "10.1109/icstw.2017.24",  language  = "English",  series    = "Proceedings - 10th IEEE International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2017",  publisher = "IEEE",  pages     = "97--102",  booktitle = "Proceedings - 10th IEEE International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2017",  url       = "https://sites.google.com/site/mutation2017/", }


@inproceedings{b02f6a2bbc4a44d987544460ca06fbb8,  title     = "Yo Variability! JHipster: A Playground for Web-Apps Analyses",  abstract  = "Though variability is everywhere, there has always been a shortage of publicly available cases for assessing variability-aware tools and techniques as well as supports for teaching variability-related concepts. Historical software product lines contains industrial secrets their owners do not want to disclose to a wide audience. The open source community contributed to large-scale cases such as Eclipse, Linux kernels, or web-based plugin systems (Drupal, WordPress). To assess accuracy of sampling and prediction approaches (bugs, performance), a case where all products can be enumerated is desirable. As configuration issues do not lie within only one place but are scattered across technologies and assets, a case exposing such diversity is an additional asset. To this end, we present in this paper our efforts in building an explicit product line on top of JHipster, an industrial open-source Web-app configurator that is both manageable in terms of configurations (approx. 163,000) and diverse in terms of technologies used. We present our efforts in building a variability-aware chain on top of JHipster's configurator and lessons learned using it as a teaching case at the University of Rennes. We also sketch the diversity of analyses that can be performed with our infrastructure as well as early issues found using it. Our long term goal is both to support students and researchers studying variability analysis and JHipster developers in the maintenance and evolution of their tools. ",  keywords  = "Case study, Web-apps, Variability-related Analyses, Variability-related analyses",  author    = "Axel Halin and Alexandre Nuttinck and Mathieu Acher and Xavier Devroey and Gilles Perrouin and Patrick Heymans",  note      = "Funding Information: This work was partly supported by the European Commission (FEDER IDEES/CO-INNOVATION). Publisher Copyright: {\textcopyright} 2017 ACM. Copyright: Copyright 2017 Elsevier B.V., All rights reserved.",  year      = "2017",  month     = feb,  day       = "1",  doi       = "10.1145/3023956.3023963",  language  = "English",  isbn      = "978-1-4503-4811-9/17/02",  series    = "VaMoS '17",  publisher = "ACM Press",  pages     = "44--51",  editor    = "Ina Schaefer and {ter Beek}, {Maurice H.} and Norbert Siegmund",  booktitle = "Proceedings - VaMoS 2017",  address   = "United States", }


@inproceedings{2be0b403a6554e8096d99ba0d2072187,  title     = "A Complexity Tale: Web Configurators",  abstract  = "Online configurators are basically everywhere. From physical goods (cars, clothes) to services (cloud solutions, insurances, etc.) such configurators have pervaded many areas of everyday life, in order to provide the customers products tailored to their needs. Being sometimes the only interfaces between product suppliers and consumers, much care has been devoted to the HCI aspects of configurators, aiming at offering an enjoyable buying experience. However, at the backend, the management of numerous and complex configuration options results from ad-hoc process rather than a systematic variability-aware engineering approach. We present our experience in analysing web configurators and formalising configuration options in terms of feature models or product configuration matrices. We also consider behavioural issues and perspectives on their architectural design. ",  keywords  = "Web Configurator, Complexity , Variability ",  author    = "Gilles Perrouin and Mathieu Acher and Jean-Marc Davril and Axel Legay and Patrick Heymans",  note      = "To Appear; 38th International Conference on Software Engineering ; Conference date: 14-05-2016 Through 22-05-2016",  year      = "2016",  doi       = "10.1145/2897045.2897051",  language  = "English",  isbn      = "978-1-5090-2240-3",  booktitle = "IEEE/ACM 1st International Workshop on Variability and Complexity in Software Design (VACE)",  publisher = "ACM Press",  address   = "United States", }


@inproceedings{f539fd2ea918403e879b11799a1aaaed,  title     = "Featured Model-based Mutation Analysis",  abstract  = "Model-based mutation analysis is a powerful but expensive testing technique. We tackle this problem by proposing an optimization technique that drastically speeds up the mutant execution process. Central to this approach is the Featured Mutant Model, a modeling framework for mutation analysis inspired by the software product line paradigm. It uses behavioral variability models, viz., Featured Transition Systems, which enable the optimized generation, configuration and execution of mutants. We provide results, based on models with thousands of transitions, suggesting that our technique is fast and scalable. We found that it outperforms previous approaches by several orders of magnitude and that it makes higher-order mutation practically applicable.",  keywords  = "featured transition systems, mutation analysis, variability",  author    = "Xavier Devroey and Gilles Perrouin and Mike Papadakis and Axel Legay and Pierre Schobbens and Patrick Heymans",  year      = "2016",  month     = may,  doi       = "10.1145/2884781.2884821",  language  = "English",  isbn      = "978-1-4503-3900-1",  series    = "ICSE '16",  publisher = "ACM Press",  pages     = "655--666",  booktitle = "Proceedings of the 38th international conference on Software Engineering",  address   = "United States", }


@inproceedings{79240f24fab04707bf6f1c3418a29181,  title     = "Featured Model Types: Towards Systematic Reuse in Modelling Language Engineering",  abstract  = "By analogy with software product reuse, the ability to reuse (meta)models and model transformations is key to achieve better quality and productivity. To this end, various opportunistic reuse techniques have been developed, such as higher-order transformations, metamodel adaptation, and model types. However, in contrast to software product development that has moved to systematic reuse by adopting (model-driven) software product lines, we are not quite there yet for modelling languages, missing economies of scope and automation opportunities. Our vision is to transpose the product line paradigm at the metamodel level, where reusable assets are formed by metamodel and transformation fragments and {"}products{"} are reusable language building blocks (model types). We introduce \textit{featured model types} to concisely model variability amongst metamodelling elements, enabling configuration, automated analysis, and derivation of tailored model types. We provide a wish list of software engineering activities to work with featured model types.",  keywords  = "Adaptation models, Semantics, Systematics, Software, Finite element analysis, Biological system modeling, Analytical models",  author    = "Gilles Perrouin and Moussa Amrani and Mathieu Acher and Axel Legay and Pierre-Yves Schobbens",  year      = "2016",  month     = may,  day       = "17",  doi       = "10.1145/2896982.2896987",  language  = "English",  isbn      = "978-1-4503-4164-6",  pages     = "1--7",  booktitle = "8th Workshop on Modelling in Software Engineering (MiSE{\textquoteright}2016)",  publisher = "ACM Press",  address   = "United States",  note      = "2016 IEEE/ACM 8th International Workshop on Modeling in Software Engineering (MiSE) ; Conference date: 16-05-2016 Through 17-05-2016", }


@inproceedings{94e03886762e43a095e49ba8040e8e0c,  title     = "Message from the A-MOST 2016 Chairs",  author    = "Mike Papadakis and Gilles Perrouin and Shaukat Ali",  year      = "2016",  month     = apr,  day       = "1",  doi       = "10.1109/ICSTW.2016.52",  language  = "English",  booktitle = "2016 IEEE Ninth International Conference on Software Testing, Verification and Validation Workshops (ICSTW)",  publisher = "IEEE", }


@inproceedings{34ca57afe5054103b1b3f3c601e006ff,  title     = "Search-based Similarity-driven Behavioural SPL Testing",  abstract  = "Dissimilar test cases have been proven to be effective to reveal faults in software systems. In the Software Product Line (SPL) context, this criterion has been applied successfully to mimic combinatorial interaction testing in an efficient and scalable manner by selecting and prioritising most dissimilar configurations of feature models using evolutionary algorithms. In this paper, we extend dissimilarity to behavioural SPL models (FTS) in a search-based approach, and evaluate its effectiveness in terms of product and fault coverage. We investigate different distances as well as as single-objective algorithms, (dissimilarity on actions, random, all-actions). Our results on four case studies show the relevance of dissimilarity-based test generation for behavioural SPL models, especially on the largest case-study where no other approach can match it.",  keywords  = "Dissimilarity Testing, Featured Transition System, Software Product Line Testing",  author    = "Xavier Devroey and Gilles Perrouin and Axel Legay and Pierre-Yves Schobbens and Patrick Heymans",  year      = "2016",  month     = jan,  day       = "27",  doi       = "10.1145/2866614.2866627",  language  = "English",  isbn      = "978-1-4503-4019-9",  series    = "VaMoS '16",  publisher = "ACM Press",  pages     = "89--96",  booktitle = "Proceedings of the Tenth International Workshop on Variability Modelling of Software-intensive Systems",  address   = "United States", }


@inproceedings{4510956e90e240ebaecd36e02250bc4c,  title     = "Unlocking visual understanding: Towards effective keys for diagrams",  abstract  = "Diagrams are (meant to be) effective communication supports to convey information to stakeholders. Being communication supports, they have to be quickly and accurately understood. To enable immediateness, many disciplines such as cartography rely on keys, which categorise diagram symbols and bind them to their meaning. Software engineering extensively relies on visual languages such as UML to communicate amongst the many stakeholders involved in information systems{\textquoteright} life-cycle. Yet, keys are barely used in these diagrams, hindering (immediate) understanding and limiting it to language experts. We provide a disciplined approach to design effective keys, by adapting graphic semiology theory and cartographers{\textquoteright} know-how to software diagrams.We illustrate our method on a UML class diagram. Designing effective keys raises questions about the concerns and tasks to be addressed by the diagram, and even, reveals issues about the language itself.",  keywords  = "Caption, Diagram understandability, Key, Legend, Visual effectiveness, Visual immediacy, Visual modelling language",  author    = "Nicolas Genon and Gilles Perrouin and {Le Pallec}, Xavier and Patrick Heymans",  year      = "2016",  doi       = "10.1007/978-3-319-46397-1_39",  language  = "English",  isbn      = "9783319463964",  volume    = "9974 LNCS",  series    = "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",  publisher = "Springer Verlag",  pages     = "505--512",  booktitle = "Conceptual Modeling - 35th International Conference, ER 2016, Proceedings",  address   = "Germany",  note      = "35th International Conference on Conceptual Modelling, ER 2016 held in conjunction with Workshops on AHA, MoBiD, MORE-BI, MReBA, QMMQ, SCME and WM2SP, 2016 ; Conference date: 14-11-2016 Through 17-11-2016", }


@article{75fd108a08c04371a40fc0e461e84b4c,  title     = "Variability and Complexity in Software Design: Towards a Research Agenda",  abstract  = "Many of today{\^a}s software systems accommodate different usage and deployment scenarios. Intentional and unintentional variability in functionality or quality attributes (e.g., performance) of software significantly increases the complexity of the problem and design space of those systems. The complexity caused by variability becomes increasingly difficult to handle due to the increasing size of software systems, new and emerging application domains, dynamic operating conditions under which software systems have to operate, fast moving and highly competitive markets, and more powerful and versatile hardware. This paper reports results of the first International Workshop on Variability and Complexity in Software Design that brought together researchers and engineers interested in the topic of complexity and variability. It also outlines directions the field might move in the future.",  author    = "Matthias Galster and Uwe Zdun and Danny Weyns and Rick Rabiser and Bo Zhang and Michael Goedicke and Gilles Perrouin",  year      = "2016",  month     = nov,  doi       = "10.1145/3011286.3011291",  language  = "English",  volume    = "41",  pages     = "27--30",  journal   = "ACM SIGSOFT Software Engineering Notes",  issn      = "0163-5948",  publisher = "ACM Press",  number    = "6", }


@inproceedings{883691fe68c248e69cf303772826f68c,  title     = "Covering SPL Behaviour with Sampled Configurations: An Initial Assessment",  abstract  = "Structural approaches to Software Product Lines (SPL) testing (such as pairwise testing) have gained momentum as they are able to scale to larger SPLs described as feature diagrams (FD). However, these methods are agnostic with respect to behaviour: the sampled configurations have thus no reason to satisfy any given behavioural criterion. In this paper, we investigate the behavioural coverage of two structural testing criteria: pairwise and similarity. To do so, we modelled four SPLs in terms of feature diagrams and associated featured transitions systems (FTSs). We then computed state, action and transition coverage for a set of generated configurations. Preliminary results indicate that for relatively small variability models with few cross-tree constraints, structural coverage-driven tools tend to cover large parts of behaviour with less than 8 configurations. Though structural coverage cannot be used directly as a replacement for behavioural driven SPL test generation, opportunities to mix structural and behavioural coverage for efficient and effective SPL testing do exist.",  keywords  = "Featured transition system, SPL testing, Structural coverage",  author    = "Xavier Devroey and Gilles Perrouin and Axel Legay and Pierre-Yves Schobbens and Patrick Heymans",  year      = "2015",  doi       = "10.1145/2701319.2701325",  language  = "English",  isbn      = "9781450332736",  volume    = "21-23-January-2015",  series    = "VaMoS '15",  publisher = "ACM Press",  pages     = "59:59--59:66",  booktitle = "Proceedings of the Ninth International Workshop on Variability Modelling of Software-intensive Systems",  address   = "United States",  note      = "9th International Workshop on Variability Modelling of Software-intensive Systems (VaMoS '15) ; Conference date: 21-01-2015 Through 23-01-2015", }


@inproceedings{7f7210b607fb4438ba73ebd35645190a,  title     = "Message from the chairs - A MOST 2015",  author    = "Mike Papadakis and Levi Lucio and Gilles Perrouin",  year      = "2015",  month     = may,  day       = "13",  doi       = "10.1109/ICSTW.2015.7107401",  language  = "English",  isbn      = "9781479918850",  booktitle = "2015 IEEE 8th International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2015 - Proceedings",  publisher = "Institute of Electrical and Electronics Engineers Inc.",  address   = "United States",  note      = "2015 8th IEEE International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2015 ; Conference date: 13-04-2015 Through 17-04-2015", }


@inproceedings{9e81f7ad1e124829943ee451a71a278a,  title     = "Poster: VIBeS, Transition System Mutation Made Easy",  abstract  = "Mutation testing is an established technique used to evaluate the quality of a set of test cases. As model-based testing took momentum, mutation techniques were lifted to the model level. However, as for code mutation analysis, assessing test cases on a large set of mutants can be costly. In this paper, we introduce the Variability-Intensive Behavioural teSting (VIBeS) framework. Relying on Featured Transition Systems (FTSs), we represent all possible mutants in a single model constrained by a feature model for mutant (in)activation. This allow to assess all mutants in a single test case execution. We present VIBeS implementation steps and the DSL we defined to ease model-based mutation analysis.",  keywords  = "Featured Transition Systems, Model-Based Mutation Testing, VIBeS",  author    = "Xavier Devroey and Gilles Perrouin and Pierre Schobbens and Patrick Heymans",  year      = "2015",  month     = aug,  day       = "12",  doi       = "10.1109/ICSE.2015.263",  language  = "English",  isbn      = "9781479919345",  volume    = "2",  pages     = "817--818",  booktitle = "Proceedings - International Conference on Software Engineering",  publisher = "IEEE Computer Society Press",  note      = "37th IEEE/ACM International Conference on Software Engineering, ICSE 2015 ; Conference date: 16-05-2015 Through 24-05-2015", }


@inproceedings{55d3663f697f41d4b3950e72da5689d8,  title     = "SPLat 2015 Second international workshop on software product line analysis tools",  abstract  = "SPLat 2015 workshop aims to provide a forum where various approaches to formal analysis and testing of variabilityintensive systems can be presented, evaluated and discussed. In particular, the workshop tries to identify commonalities and variabilities regarding the choice of underlying concepts that capture variability as well as strengths and weaknesses of approaches in their effort to defeat combinatorial explosion. The long term goal of the workshop is to provide guidance to practitioners on where and when to use the aforementioned techniques while validating variability-intensive systems.",  keywords  = "Analysis, Software product lines, Testing, Validation, Variability, Verification",  author    = "Gilles Perrouin and Axel Legay",  year      = "2015",  month     = jul,  day       = "20",  doi       = "10.1145/2791060.2791064",  language  = "English",  volume    = "20-24-July-2015",  pages     = "395--395",  booktitle = "Proceedings - 19th International Software Product Line Conference, SPLC 2015",  publisher = "ACM Press",  address   = "United States",  note      = "19th International Software Product Line Conference, SPLC 2015 ; Conference date: 20-07-2015 Through 24-07-2015", }


@inproceedings{234870b32249482a8606d9ee21aaac3e,  title     = "Abstract test case generation for behavioural testing of software product lines",  abstract  = "In Model Based Testing (MBT), test cases are generated automatically from a partial representation of expected behaviour of the System Under Test (SUT) (i.e., the model). For most industrial systems, it is impossible to generate all the possible test cases from the model. The test engineer recourse to generation algorithms that maximize a given coverage criterion, a metric indicating the percentage of possible behaviours of the SUT covered by the test cases. Our previous work redefined classical Transition Systems (TSs) criteria for SPLs, using Featured Transition Systems (FTSs), a mathematical structure to compactly represent the behaviour of a SPL, as model for test case generation. In this paper, we provide one all-states coverage driven generation algorithm and discuss its scalability and efficiency with respect to random generation. All-states and random generation are compared on fault-seeded FTSs.",  keywords  = "Model-based testing, Software product line, Test case generation",  author    = "Xavier Devroey and Gilles Perrouin and Pierre-Yves Schobbens",  year      = "2014",  month     = sep,  day       = "15",  doi       = "10.1145/2647908.2655971",  language  = "English",  isbn      = "9781450327398",  volume    = "2",  series    = "SPLC '14",  publisher = "ACM Press",  pages     = "86--93",  booktitle = "ACM International Conference Proceeding Series",  address   = "United States",  note      = "18th International Software Product Line Conference, SPLC 2014 ; Conference date: 15-09-2014 Through 19-09-2014", }


@inproceedings{a2ba919cc2804ac5bde4a5d8c49a1137,  title     = "A Variability Perspective of Mutation Analysis",  abstract  = "Mutation testing is an effective technique for either improving or generating fault-finding test suites. It creates defective or incorrect program artifacts of the program under test and evaluates the ability of test suites to reveal them. Despite being effective, mutation is costly since it requires assessing the test cases with a large number of defective artifacts. Even worse, some of these artifacts are behaviourally {"}equivalent{"} to the original one and hence, they unnecessarily increase the testing effort. We adopt a variability perspective on mutation analysis. We model a defective artifact as a transition system with a specific feature selected and consider it as a member of a mutant family. The mutant family is encoded as a Featured Transition System, a compact formalism initially dedicated to model-checking of software product lines. We show how to evaluate a test suite against the set of all candidate defects by using mutant families. We can evaluate all the considered defects at the same time and isolate some equivalent mutants. We can also assist the test generation process and eciently consider higher-order mutants.",  keywords  = "Featured Transition Systems, Mutation Testing",  author    = "Xavier Devroey and Gilles Perrouin and Maxime Cordy and Mike Papadakis and Axel Legay and Pierre-Yves Schobbens",  year      = "2014",  month     = nov,  day       = "16",  doi       = "10.1145/2635868.2666610",  language  = "English",  series    = "FSE 2014",  publisher = "ACM Press",  pages     = "841--844",  booktitle = "Proceedings of the 22Nd ACM SIGSOFT International Symposium on Foundations of Software Engineering",  address   = "United States",  note      = "22nd ACM SIGSOFT International Symposium on the Foundations of Software Engineering (FSE '14) ; Conference date: 16-11-2014 Through 21-11-2014", }


@article{7eec51454602462a83bb01dffd3d85fa,  title     = "Bypassing the combinatorial explosion: Using similarity to generate and prioritize t-wise test configurations for software product lines",  abstract  = "Large Software Product Lines (SPLs) are common in industry, thus introducing the need of practical solutions to test them. To this end, t-wise can help to drastically reduce the number of product configurations to test. Current t-wise approaches for SPLs are restricted to small values of t. In addition, these techniques fail at providing means to finely control the configuration process. In view of this, means for automatically generating and prioritizing product configurations for large SPLs are required. This paper proposes (a) a search-based approach capable of generating product configurations for large SPLs, forming a scalable and flexible alternative to current techniques and (b) prioritization algorithms for any set of product configurations. Both these techniques employ a similarity heuristic. The ability of the proposed techniques is assessed in an empirical study through a comparison with state of the art tools. The comparison focuses on both the product configuration generation and the prioritization aspects. The results demonstrate that existing t-wise tools and prioritization techniques fail to handle large SPLs. On the contrary, the proposed techniques are both effective and scalable. Additionally, the experiments show that the similarity heuristic can be used as a viable alternative to t-wise. {\textcopyright} 1976-2012 IEEE.",  keywords  = "prioritization, search-based approaches, similarity, Software product lines, T-wise Interactions, testing",  author    = "Christopher Henard and Mike Papadakis and Gilles Perrouin and Jacques Klein and Patrick Heymans and Traon, {Yves Le}",  note      = "Technical Report",  year      = "2014",  month     = jul,  day       = "1",  doi       = "10.1109/TSE.2014.2327020",  language  = "English",  volume    = "40",  pages     = "650--670",  journal   = "IEEE Transactions on Software Engineering",  issn      = "0098-5589",  publisher = "Institute of Electrical and Electronics Engineers Inc.",  number    = "7", }


@inproceedings{7f3f746d86ec4d50ab0e88c4be60b187,  title     = "Coverage criteria for behavioural testing of software product lines",  abstract  = "Featured Transition Systems (FTS) is a mathematical structure to represent the behaviour of software product line in a concise way. The combination of the well-known transition systems approach to formal behavioural modelling with feature expressions was pivotal to the design of efficient verification approaches. Such approaches indeed avoid to consider products{\textquoteright} behaviour independently, leading to often exponential savings. Building on this successful structure, we lay the foundations of model-based testing approach to SPLs. We define several FTS-aware coverage criteria and report on our experience combining FTS with usage-based testing for configurable websites.",  keywords  = "Coverage criteria, Model based testing, Software product line engineering",  author    = "Xavier Devroey and Gilles Perrouin and Axel Legay and Maxime Cordy and Pierre-Yves Schobbens and Patrick Heymans",  year      = "2014",  month     = nov,  day       = "8",  language  = "English",  isbn      = "9783662452332",  volume    = "8802",  series    = "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",  publisher = "Springer Verlag",  pages     = "336--350",  booktitle = "Proceedings of the 6th International Symposium on Leveraging Applications of Formal Methods, Verification and Validation (ISOLA)",  address   = "Germany",  note      = "6th International Symposium on Leveraging Applications of Formal Methods, Verification and Validation, ISoLA 2014 ; Conference date: 08-10-2014 Through 11-10-2014", }


@inproceedings{8de8646105704abe9915ff4188bb9415,  title     = "State Machine Flattening: Mapping Study and Assessment",  abstract  = "State machine formalisms equipped with hierarchy and parallelism allow to compactly model complex system behaviours. Such models can then be transformed into executable code or inputs for model-based testing and verification techniques. Generated artifacts are mostly flat descriptions of system behaviour. Flattening is thus an essential step of these transformations. To assess the importance of flattening, we have defined and applied a systematic mapping process and 30 publications were finally selected. However, it appeared that flattening is rarely the sole focus of the publications and that care devoted to the description and validation of flattening techniques varies greatly. Preliminary assessment of associated tool support indicated limited tool availability and scalability on challenging models. We see this initial investigation as a first step towards generic flattening techniques and scalable tool support, cornerstones of reliable model-based behavioural development. ",  keywords  = "State machine, Flattening, Systematic Mapping Study, Tools experimentation",  author    = "Xavier Devroey and Gilles Perrouin and Maxime Cordy and Axel Legay and Pierre-Yves Schobbens and Patrick Heymans",  year      = "2014",  month     = mar,  day       = "21",  language  = "English",  booktitle = "2015 IEEE Eighth International Conference on Software Testing, Verification and Validation Workshops",  publisher = "IEEE", }


@conference{168bfe43953949d28ac4bf9527e9ae7c,  title    = "Towards a systematic approach for cognitively efficient configuration visualizations",  abstract = "In Software Product Line Engineering, the configuration process consists in deriving products from a variability model, usually a feature model. Configuration is difficult for stakeholders because of numerous features to choose and complex constraints relating them. If analysis tools assist in getting consistent products, they do not improve the cognitive effort to be carried out by stakeholders. Data visualization techniques are known to be helpful in this respect. However, choosing the right amongst thousands of visualizations available is often done in an ad-hoc way. In this paper, we present a systematic approach which, from a study of the data relevant to the configuration process, leads us to select an appropriate visualization for understanding configuration decisions.",  author   = "C{\'e}line Sauvage-Thomase and Nicolas Biri and Gilles Perrouin and Patrick Heymans",  year     = "2014",  month    = dec,  day      = "9",  language = "English",  note     = "Journ{\'e}e Ligne de Produits '14 ; Conference date: 09-12-2014 Through 09-12-2014", }


@inproceedings{336491a97e084fa9aee2c8d9017e906d,  title     = "Towards Statistical Prioritization for Software Product Lines Testing",  abstract  = "Software Product Lines (SPL) are inherently difficult to test due to the combinatorial explosion of the number of products to consider. To reduce the number of products to test, sampling techniques such as combinatorial interaction testing have been proposed. They usually start from a feature model and apply a coverage criterion (e.g. pairwise feature interaction or dissimilarity) to generate tractable, fault-finding, lists of configurations to be tested. Prioritization can also be used to sort/generate such lists, optimizing coverage criteria or weights assigned to features. However, current sampling/prioritization techniques barely take product behavior into account. We explore how ideas of statistical testing, based on a usage model (a Markov chain), can be used to extract configurations of interest according to the likelihood of their executions. These executions are gathered in featured transition systems, compact representation of SPL behavior. We discuss possible scenarios and give a prioritization procedure illustrated on an example.",  keywords  = "Software Product Line, Software Testing, Software Product Line Testing, Prioritization, Statistical Testing",  author    = "Xavier Devroey and Maxime Cordy and Gilles Perrouin and Pierre-Yves Schobbens and Axel Legay and Patrick Heymans",  year      = "2014",  month     = jan,  day       = "22",  doi       = "10.1145/2556624.2556635",  language  = "English",  isbn      = "978-1-4503-2556-1",  volume    = "VaMoS '14",  pages     = "10:1--10:7",  editor    = "Andrzej Wasowski and Thorsten Weyer",  booktitle = "Proceedings of the Eighth International Workshop on Variability Modelling of Software-Intensive Systems",  publisher = "ACM Press",  address   = "United States",  note      = "The 8th International Workshop on Variability Modelling of Software-intensive Systems (VaMoS '14) ; Conference date: 22-01-2014 Through 24-01-2014", }


@misc{285c669e6e69459c8d4bdbde6d112870,  title    = "VIBeS: Variability Intensive system Behavioural teSting",  abstract = "VIBeS aims at providing model-driven testing tools working on Featured Transition Systems (FTSs) in order to perform: test-case selection, test-case prioritization, prioritization, test-case execution, mutation testing, etc.",  keywords = "Tools, Model-Based Testing, Software Product Line, Software Product Line Testing, Software Testing, Featured Transition System",  author   = "Xavier Devroey and Gilles Perrouin",  year     = "2014",  month    = oct,  language = "English", }


@inproceedings{5aa9d5d4b51a43e5a66468045bbc7a7e,  title     = "Assessing software product line testing via model-based mutation: An application to similarity testing",  abstract  = "Needs for mass customization and economies of scale have pushed engineers to develop Software Product Lines (SPLs). SPLs are families of products sharing commonalities and exhibiting differences, built by reusing software assets abstractly represented by features. Feature models describe the constraints that link the features and allow the configuration of tailored software products. Common SPLs involve hundreds, even thousands of features, leading to billions of possible software products. As a result, testing a product line is challenging due to the enormous size of the possible products. Existing techniques focus on testing based on the product line's feature model by selecting a limited set of products to test. Being created manually or reverse-engineered, feature models are prone to errors impacting the generated test suites. In this paper, we examine ability of test suites to detect such errors. In particular, we propose two mutation operators to derive erroneous feature models (mutants) from an original feature model and assess the capability of the generated original test suite to kill the mutants. Experimentation on real feature models demonstrate that dissimilar tests suites have a higher mutant detection ability than similar ones, thus validating the relevance of similarity-driven product line testing.",  keywords  = "Feature Models, Mutation, Similarity, Software Product Lines, Testing",  author    = "Christopher Henard and Mike Papadakis and Gilles Perrouin and Jacques Klein and Traon, {Yves Le}",  year      = "2013",  month     = sep,  day       = "9",  doi       = "10.1109/ICSTW.2013.30",  language  = "English",  pages     = "188--197",  booktitle = "Proceedings - IEEE 6th International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2013",  publisher = "IEEE",  note      = "IEEE 6th International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2013 ; Conference date: 18-03-2013 Through 20-03-2013", }


@inproceedings{84a798f932364719923e6e088aba83d8,  title     = "Model-based verification of energy-aware real-time automotive systems",  abstract  = "EAST-ADL is an architectural description language dedicated to safety-critical automotive embedded system design with a focus on structural specification and behavioral constraints. The current concept of EAST-ADL provides limited support for modeling and analysis of Energy-aware Real-Time (ERT) behaviors due to the absence of energy constraints modeling notations and the lack of formal semantics. We address these limitations by extending the EAST-ADL notation with energy constraints and integrating this extension with formal modeling and analysis techniques. We provide a mapping scheme as the basis for automatic model transformation between the extended EAST-ADL and priced timed automata for model checking. This methodology has been implemented in a tool called A-BeTA (Aβ) and is demonstrated by means of the Brake-By-Wire case study. Our approach enables formal modeling and verification of ERT systems in EAST-ADL and identifies potential conflicts between different automotive functions at an early stage of development",  keywords  = "EAST-ADL, Energy-aware Timed Embedded Systems, Model Checking, Model-Transformation",  author    = "Eun-Young Kang and Gilles Perrouin and Schobbens, {Pierre Yves}",  year      = "2013",  month     = oct,  day       = "15",  doi       = "10.1109/ICECCS.2013.27",  language  = "English",  isbn      = "9780769550077",  pages     = "135--144",  booktitle = "Proceedings of the IEEE International Conference on Engineering of Complex Computer Systems, ICECCS",  note      = "18th International Conference on Engineering of Complex Computer Systems, ICECCS 2013 ; Conference date: 17-07-2013 Through 19-07-2013", }


@inproceedings{81eddc0e756546fd81c642cd1c0b6e16,  title     = "Multi-objective test generation for software product lines",  abstract  = "Software Products Lines (SPLs) are families of products sharing common assets representing code or functionalities of a software product. These assets are represented as features, usually organized into Feature Models (FMs) from which the user can configure software products. Generally, few features are sufficient to allow configuring millions of software products. As a result, selecting the products matching given testing objectives is a difficult problem. The testing process usually involves multiple and potentially conflicting testing objectives to fulfill, e.g. maximizing the number of optional features to test while at the same time both minimizing the number of products and minimizing the cost of testing them. However, most approaches for generating products usually target a single objective, like testing the maximum amount of feature interactions. While focusing on one objective may be sufficient in certain cases, this practice does not reflect real-life testing situations. The present paper proposes a genetic algorithm to handle multiple conflicting objectives in test generation for SPLs. Experiments conducted on FMs of different sizes demonstrate the effectiveness, feasibility and practicality of the introduced approach.",  keywords  = "feature models, genetic algorithms, multi-objective optimization, software product lines, test generation",  author    = "Christopher Henard and Mike Papadakis and Gilles Perrouin and Jacques Klein and {Le Traon}, Yves",  year      = "2013",  month     = sep,  day       = "18",  doi       = "10.1145/2491627.2491635",  language  = "English",  isbn      = "9781450319683",  pages     = "62--71",  booktitle = "Proceedings of the 17th International Software Product Line Conference (SPLC)",  publisher = "ACM Press",  address   = "United States",  note      = "17th International Software Product Line Conference, SPLC 2013 ; Conference date: 26-08-2013 Through 30-08-2013", }


@inproceedings{ce1d41744ae44f72837ade60cbe7e55a,  title     = "PLEDGE: a product line editor and test generation tool",  abstract  = "Specific requirements of clients lead to the development of variants of the same software. These variants form a Software Product Line (SPL). Ideally, testing a SPL involves testing all the software products that can be configured through the combination of features. This, however, is intractable in practice since a) large SPLs can lead to millions of possible software variants and b) the testing process is usually limited by budget and time constraints. To overcome this problem, this paper introduces PLEDGE, an open source tool that selects and prioritizes the product configurations maximizing the feature interactions covered. The uniqueness of PLEDGE is that it bypasses the computation of the feature interactions, allowing to scale to large SPLs.",  keywords  = "Combinatorial interaction testing, Prioritization, Scalability, Search-based approaches, Software product lines, T-wise",  author    = "Christopher Henard and Mike Papadakis and Gilles Perrouin and Jacques Klein and {Le Traon}, Yves",  year      = "2013",  month     = dec,  day       = "23",  doi       = "10.1145/2499777.2499778",  language  = "English",  isbn      = "9781450323253",  pages     = "126--129",  booktitle = "17th International Software Product Line Conference (co-located workshops)",  publisher = "ACM Press",  address   = "United States",  note      = "17th International Software Product Line Conference Co-located Workshops, SPLC 2013 ; Conference date: 26-08-2013 Through 30-08-2013", }


@inproceedings{b26558b148a74c8fbd3194d0864aace1,  title     = "Towards automated testing and fixing of re-engineered Feature Models",  abstract  = "Mass customization of software products requires their efficient tailoring performed through combination of features. Such features and the constraints linking them can be represented by Feature Models (FMs), allowing formal analysis, derivation of specific variants and interactive configuration. Since they are seldom present in existing systems, techniques to re-engineer FMs have been proposed. There are nevertheless error-prone and require human intervention. This paper introduces an automated search-based process to test and fix FMs so that they adequately represent actual products. Preliminary evaluation on the Linux kernel FM exhibit erroneous FM constraints and significant reduction of the inconsistencies.",  keywords  = "Feature Model, Fixing, Search-based, Testing",  author    = "Christopher Henard and Mike Papadakis and Gilles Perrouin and Jacques Klein and {Le Traon}, Yves",  year      = "2013",  month     = oct,  day       = "30",  doi       = "10.1109/ICSE.2013.6606689",  language  = "English",  isbn      = "9781467330763",  volume    = "2",  pages     = "1245--1248",  booktitle = "Proceedings - International Conference on Software Engineering",  publisher = "IEEE",  note      = "2013 35th International Conference on Software Engineering, ICSE 2013 ; Conference date: 18-05-2013 Through 26-05-2013", }


@misc{422858c5733d4706a85e1d69220b4db6,  title     = "Towards Statistical Prioritization for Software Product Lines Testing",  abstract  = "Software Product Lines (SPL) are inherently difficult to test due to the combinatorial explosion of the number of products to consider. To reduce the number of products to test, sampling techniques such as combinatorial interaction testing have been proposed. They usually start from a feature model and apply a coverage criterion (e.g. pairwise feature interaction or dissimilarity) to generate tractable, fault-finding, lists of configurations to be tested. Prioritization can also be used to sort/generate such lists, optimizing coverage criteria or weights assigned to features. However, current sampling/prioritization techniques barely take product behavior into account. We explore how ideas of statistical testing, based on a usage model (a Markov chain), can be used to extract configurations of interest according to the likelihood of their executions. These executions are gathered in featured transition systems, compact representation of SPL behavior. We discuss possible scenarios and give a prioritization procedure illustrated on an example.",  keywords  = "cs.SE",  author    = "Xavier Devroey and Maxime Cordy and Gilles Perrouin and Pierre-Yves Schobbens and Axel Legay and Patrick Heymans",  note      = "Extended version published at VaMoS '14 (http://dx.doi.org/10.1145/2556624.2556635)",  year      = "2013",  month     = oct,  day       = "9",  language  = "English",  volume    = "arXiv:1310.2474",  publisher = "Arxiv",  type      = "Other", }


@inproceedings{a281cf447d1d4f389c5cc4da040dff73,  title     = "A vision for behavioural model-driven validation of software product lines",  abstract  = "The Software Product Lines (SPLs) paradigm promises faster development cycles and increased quality by systematically reusing software assets. This paradigm considers a family of systems, each of which can be obtained by a selection of features in a variability model. Though essential, providing Quality Assurance (QA) techniques for SPLs has long been perceived as a very difficult challenge due to the combinatorics induced by variability and for which very few techniques were available. Recently, important progress has been made by the model-checking and testing communities to address this QA challenge, in a very disparate way though. We present our vision for a unified framework combining model-checking and testing approaches applied to behavioural models of SPLs. Our vision relies on Featured Transition Systems (FTSs), an extension of transition systems supporting variability. This vision is also based on model-driven technologies to support practical SPL modelling and orchestrate various QA scenarios. We illustrate one of such scenarios on a vending machine SPL.",  keywords  = "Software Product Line, Model-Based Testing, Model-Checking",  author    = "X. Devroey and M. Cordy and G. Perrouin and E.-Y. Kang and P.-Y. Schobbens and P. Heymans and A. Legay and B. Baudry",  note      = "Publication editors : T. Margaria, B. Steffen, and M. Merten; The 5th International Symposium On Leveraging Applications of Formal Methods, Verification and Validation (ISoLA 2012) ; Conference date: 10-10-2012",  year      = "2012",  month     = oct,  day       = "15",  doi       = "10.1007/978-3-642-34026-0_16",  language  = "English",  isbn      = "9783642340253",  volume    = "7609 LNCS",  pages     = "208--222",  booktitle = "Proceedings of the 5th International Symposium On Leveraging Applications of Formal Methods, Verification and Validation (ISoLA)", }


@conference{35b045526c794638a5e268cc55ee8080,  title    = "Behavioural Model-Driven Validation of Software Product Lines",  author   = "Xavier Devroey and Gilles Perrouin and Pierre Schobbens and Patrick Heymans and Benoit Baudry",  year     = "2012",  month    = apr,  day      = "24",  language = "English",  note     = "2nd PReCISE Day ; Conference date: 24-04-2012", }


@inproceedings{1fc033eb13d3402aa6a50bc1eb86e623,  title     = "Deriving Configuration Interfaces from Feature Models : A Vision Paper",  author    = "Quentin Boucher and Gilles Perrouin and Patrick Heymans",  year      = "2012",  language  = "English",  pages     = "37--44",  booktitle = "Proceedings of the Sixth International Workshop on Variability Modelling of Software-intensive Systems (VaMoS'12), Leipzig, Germany, January 25-27,", }


@misc{3455556e5ce34ff59805ce3a0be7697f,  title    = "Engineering Configuration Graphical User Interfaces: A Model-based Perspective: Paper submitted to ECMFA'12",  author   = "Quentin Boucher and Gilles Perrouin and Mathieu Acher and Patrick Heymans",  year     = "2012",  language = "English",  type     = "Other", }


@inproceedings{28319659f9d94f26a0d26981989808c7,  title     = "On Extracting Feature Models From Product Descriptions",  author    = "Mathieu Acher and Anthony Cleve and Gilles Perrouin and Patrick Heymans and Philippe Collet and Philippe Lahire and Charles Vanbeneden",  note      = "Publication editors : Ulrich W. Eisenecker, Sven Apel and Stefania Gnesi",  year      = "2012",  language  = "English",  pages     = "45--54",  editor    = "W Ulrich and Eisenecker Sven and Apel Stefania",  booktitle = "Proceedings of the 6th International Workshop on Variability Modelling of Software-intensive Systems (VaMoS 2012)",  publisher = "ACM Press",  address   = "United States", }


@article{b30eb65f479d4efc95eee053b48b3921,  title     = "Pairwise testing for software product lines: Comparison of two approaches",  abstract  = "Software Product Lines (SPL) are difficult to validate due to combinatorics induced by variability, which in turn leads to combinatorial explosion of the number of derivable products. Exhaustive testing in such a large products space is hardly feasible. Hence, one possible option is to test SPLs by generating test configurations that cover all possible t feature interactions (t-wise). It dramatically reduces the number of test products while ensuring reasonable SPL coverage. In this paper, we report our experience on applying t-wise techniques for SPL with two independent toolsets developed by the authors. One focuses on generality and splits the generation problem according to strategies. The other emphasizes providing efficient generation. To evaluate the respective merits of the approaches, measures such as the number of generated test configurations and the similarity between them are provided. By applying these measures we were able to derive useful insights for pairwise and t-wise testing of product lines. ",  keywords  = "Model-based engineering and testing, t-wise and pairwise Test generation, Software product lines, Alloy",  author    = "Gilles Perrouin and Sebastian Oster and Sagar Sen and Jacques Klein and Benoit Baudry and {Le Traon}, Yves",  year      = "2012",  month     = sep,  day       = "1",  doi       = "10.1007/s11219-011-9160-9",  language  = "English",  volume    = "20",  pages     = "605--643",  journal   = "Software Quality Journal",  publisher = "Springer New York",  number    = "3-4", }


@inproceedings{925ea09b7dbc4f868759d5bd9679bd0e,  title     = "Simulation-Based Abstractions for Software Product-Line Model Checking",  author    = "Maxime Cordy and Andreas Classen and Gilles Perrouin and Patrick Heymans and Pierre-Yves Schobbens and Axel Legay",  year      = "2012",  language  = "English",  volume    = "672-682",  booktitle = "Proceedings of the 34th International Conference on Software Engineering (ICSE 2012), Zurich, Switzerland, June 2-9",  publisher = "IEEE", }


@inproceedings{e26e5bdbf3cd4d61a0a1b5fe5e674ad5,  title     = "Towards Configurable ISO 29110-compliant Software Development Processes for Very Small Entities",  abstract  = "Using ISO/IEC 29110, very small entities (VSEs) can perform a step-wise increment of their software process by switching between the different ISO/IEC profiles. However, ISO/IEC 29110 provides no guidance on how to switch between profiles incrementally, other than resorting to costly software development process experts unaffordable for VSEs. To address this shortcoming, this paper shows how to model the variability of currently available ISO/IEC 29110 profiles in an integrated and configurable workflow with illustration on the Requirements Engineering (RE) activity. This workflow is linked to a questionnaire used to support automated process configuration. Thereby, the user can easily derive the ISO/IEC-compliant processes to switch between profiles incrementally. The feasibility of this approach is shown using open-source workflow management tools Synergia and YAWL.",  keywords  = "Workflow Management, Configuration,, ISO/IEC 29110, Requirements Processes",  author    = "Quentin Boucher and Gilles Perrouin and Jean-Christophe Deprez and Patrick Heymans",  year      = "2012",  language  = "English",  pages     = "169--180",  booktitle = "Proceedings of the 19th European System, Software & Service Process Improvement & Innovation Conference (EuroSPI'12), Vienna, Austria",  publisher = "Springer",  note      = "19th European System, Software &amp; Service Process Improvement &amp; Innovation Conference (EuroSPI{\textquoteright}12) ; Conference date: 25-06-2012 Through 27-06-2012", }


@inproceedings{0f8296da13734a958487bed351b395bc,  title     = "Towards Flexible Evolution of Dynamically Adaptive Systems",  author    = "Gilles Perrouin and Brice Morin and Franck Chauvel and Franck Fleurey and Jacques Klein and {Le Traon}, Yves and Olivier Barais and Jean-Marc J{\'e}z{\'e}quel",  year      = "2012",  doi       = "10.1109/ICSE.2012.6227081",  language  = "English",  pages     = "1353----1356",  booktitle = "Proceedings of the 34th International Conference on Software Engineering (ICSE 2012), NIER Track, Zurich, Switzerland, June 2-9",  publisher = "IEEE", }


@inproceedings{af0c5813e205407aa8c00606b31ade3f,  title     = "Towards formal energy and time aware behaviors in EAST-ADL: An MDE approach",  abstract  = "Energy-aware real-time (ERT) systems are increasingly complex and have pervaded various areas, from automotive to telecommunication systems. Dedicated UML-based modeling languages, such as EAST-ADL or MARTE have been proposed to harness this complexity. However, they provide limited support for modeling ERT constraints, in particular continuous energy consumption. To cope with this issue we introduce a formal interchange language, eXtended Function-block Graphs (XFG), for modeling and analysis of ERT behaviors. An XFG UML profile augmenting EAST-ADL and MARTE is presented to facilitate modeling those behaviors by means of state machines. A set of mapping rules is proposed to automatically transform such profiled models into the XFG language.",  author    = "E.-Y. Kang and G. Perrouin and P.-Y. Schobbens",  year      = "2012",  month     = jan,  day       = "1",  doi       = "10.1109/QSIC.2012.13",  language  = "English",  isbn      = "9780769548333",  pages     = "124--127",  booktitle = "Proceedings - International Conference on Quality Software", }


@inproceedings{db5925b690c84134ba530a8822ad0f1d,  title     = "Towards More Reliable Configurators: A Re-engineering Perspective",  abstract  = "Delivering configurable solutions, i.e. products tailored to the requirements of a particular customer, is a priority of most B2B and B2C markets. These markets now heavily rely on interactive configurators that help customers build complete and correct products. Reliability is thus a critical requirement for configurators. Yet, our experience in industry reveals that many configurators are developed in an ad hoc manner, raising correctness and maintenance issues. In this paper, we present a vision to re-engineering more reliable configurators and the challenges it poses. The first challenge is to reverse engineer from an existing configurator the variability information, including complex rules, and to consolidate it in a variability model, namely a feature model. The second challenge is to forward engineer a new configurator that uses the feature model to generate a customized graphical user interface and the underlying reasoning engine.",  keywords  = " Re-engineering, Configuration, Graphical User Interface",  author    = "Quentin Boucher and Abbasi, {Ebrahim Khalil} and Arnaud Hubaux and Gilles Perrouin and Mathieu Acher and Patrick Heymans",  year      = "2012",  language  = "English",  pages     = "29--32",  booktitle = "Proceedings of the 3rd Product LinE Approaches in Software Engineering (PLEASE'12), co-located with ICSE'12, Zurich, Switzeland", }


@article{e0850c5dc1a94bce95f02a3c5ed98528,  title     = "Weaving variability into domain metamodels",  abstract  = "Domain-specific modeling languages (DSMLs) are the essence of MDE. A DSML describes the concepts of a particular domain in a metamodel, as well as their relationships. Using a DSML, it is possible to describe a wide range of different models that often share a common base and vary on some parts. On the one hand, some current approaches tend to distinguish the variability language from the DSMLs themselves, implying greater learning curve for DSMLs stakeholders and a significant overhead in product line engineering. On the other hand, approaches integrating variability in DSMLs lack generality and tool support. We argue that aspect-oriented modeling techniques enabling flexible metamodel composition and results obtained by the software product line community to manage and resolve variability form the pillars for a solution for integrating variability into DSMLs. In this article, we consider variability as an independent and generic aspect to be woven into the DSML. In particular, we detail how variability is woven and how to perform product line derivation. We validate our approach through the weaving of variability into two different metamodels: Ecore—widely used for DSML definition—and SmartAdapters, our aspect model weaver. These results emphasize how new abilities of the language can be provided by this means.",  keywords  = "Domain specific languages, Model weaving, Variability and software product lines",  author    = "Gilles Perrouin and Gilles Vanwormhoudt and Brice Morin and Philippe Lahire and Olivier Barais and Jean-Marc J{\'e}z{\'e}quel",  year      = "2012",  month     = jul,  day       = "1",  doi       = "10.1007/s10270-010-0186-4",  language  = "English",  volume    = "11",  pages     = "361--383",  journal   = "Software and Systems Modeling",  publisher = "Springer Verlag",  number    = "3", }


@misc{704dcc963479485cad5fa3619b93ca5c,  title    = "XFG Language and its Profile for Modeling and Analysis of Energy-Aware Real-Time Behaviors",  author   = "Eun-Young Kang and Gilles Perrouin and Pierre Schobbens",  year     = "2012",  language = "English",  type     = "Other", }


@inproceedings{04055a6fdb814880ba96bd7626dd6087,  title     = "A Metamodel-based Classification of Variability Modeling Approaches",  abstract  = "Software Product Line Engineering (SPLE) is an emerging paradigm taking momentum that proposes to address flexibility and shorter time-to-market by maximizing software reuse. The key characteristic of SPLE is the effective modelling and management of variability, for which a number of Variability Modeling (VM) techniques have been developed during the last two decades. Therefore, understanding their commonalities and differences is important for selecting the most suitable technique. In this paper, we propose a metamodel-based classification of VM techniques gathered through a survey of relevant literature.",  author    = "Istoan Paul and Klein Jacques and Gilles Perrouin and J{\'e}z{\'e}quel Jean-Marc",  note      = "Publication editors : Oystein Haugen, Krzysztof Czarnecki, Jean-Marc J{\'e}z{\'e}quel, Birger Moller-Pedersen, Andrzej Wasowski",  year      = "2011",  language  = "English",  editor    = "Oystein Haugen and Krzysztof Czarnecki and J{\'e}z{\'e}quel, {Jean Marc} and Birger Moller-Pedersen and Andrzej Wasowski",  booktitle = "VARiability for You (VARY) Workshop, co-located with MoDELS 2011", }


@inproceedings{bc1646b541914a67b99b1cc2d9d77630,  title     = "Proceedings of the 1st International Workshop on Variability-intensive Systems Testing, Validation & Verification (VAST)",  author    = "Gilles Perrouin and Andreas Metzger and Patrick Heymans and {Le Traon}, Yves",  year      = "2011",  language  = "English",  booktitle = "Software Testing, Verification, and Validation Workshops (ICSTW)", }


@misc{e8862db07bf74e709d76e9160d471687,  title    = "Simulation-Based Abstractions for Software Product-Line Model Checking",  author   = "Maxime Cordy and Andreas Classen and Gilles Perrouin and Patrick Heymans and Pierre-Yves Schobbens and Axel Legay",  year     = "2011",  language = "English",  type     = "Other", }


@article{11b12a588e914c099fe2c2a372e7fd28,  title     = "VAST 2011 workshop summary",  author    = "Gilles Perrouin and Andreas Metzger and Patrick Heymans and {Le Traon}, Yves",  year      = "2011",  doi       = "10.1145/1988997.2018429",  language  = "English",  volume    = "36",  pages     = "24--25",  journal   = "ACM SIGSOFT Software Engineering Notes",  issn      = "0163-5948",  publisher = "ACM Press",  number    = "4", }


@inproceedings{251480fc25574256a332ff55c7e9a2f6,  title     = "Automated and scalable t-wise test case generation strategies for software product lines",  abstract  = "Software Product Lines (SPL) are difficult to validate due to combinatorics induced by variability across their features. This leads to combinatorial explosion of the number of derivable products. Exhaustive testing in such a large space of products is infeasible. One possible option is to test SPLs by generating test cases that cover all possible T feature interactions (T-wise). T-wise dramatically reduces the number of test products while ensuring reasonable SPL coverage. However, automatic generation of test cases satisfying T-wise using SAT solvers raises two issues. The encoding of SPL models and T-wise criteria into a set of formulas acceptable by the solver and their satisfaction which fails when processed “all-at-once'”. We propose a scalable toolset using Alloy to automatically generate test cases satisfying T-wise from SPL models. We define strategies to split T-wise combinations into solvable subsets. We design and compute metrics to evaluate strategies on Aspect OPTIMA, a concrete transactional SPL.",  author    = "G. Perrouin and S. Sen and J. Klein and B. Baudry and {Le Traon}, Y.",  year      = "2010",  doi       = "10.1109/ICST.2010.43",  language  = "English",  isbn      = "978-1-4244-6435-7",  pages     = "459--468",  booktitle = "Third International Conference on Software Testing, Verification and Validation (ICST)",  publisher = "IEEE", }


@inproceedings{045d24e1a7f4419d98e9a960ab6807bb,  title     = "Composing models for detecting inconsistencies: A requirements engineering perspective",  author    = "G. Perrouin and E. Brottier and B. Baudry and {Le Traon}, Y.",  year      = "2009",  language  = "English",  isbn      = "978-3-642-02049-0",  volume    = "LNCS 5512",  pages     = "89--103",  booktitle = "Requirements Engineering: Foundation for Software Quality",  publisher = "Springer", }


@inproceedings{c2aa69ae8c6c4fdd82f75b2b104bc200,  title     = "Dynamic software product lines for service-based systems",  abstract  = "Ageing populations and the necessity to reduce environmental impact raise new challenges on our living buildings. Convergence of home control systems (air conditioning, light management) and computer science, or house automation, allows to enhance comfort, security and health of inhabitants, and reduce energy consumption. Each of these abilities can be perceived as a service provided by the house automation system. Starting from this point, we developed EnTiMid , a middleware able to make systems from different brands cooperate in a single service-based platform. Yet the proliferation and variability of such services, and needs to tailor each system to a particular building, make the design of these systems complex. In this prospective paper, we explain how the notion of dynamic software product line facilitates such designs by providing sophisticated techniques for managing variability across services from design time to runtime and allowing their automatic composition.",  author    = "P. Istoan and G. Nain and G. Perrouin and J.M. J{\'e}z{\'e}quel",  year      = "2009",  doi       = "10.1109/CIT.2009.54",  language  = "English",  isbn      = "978-0-7695-3836-5",  volume    = "2",  pages     = "193--198",  booktitle = "Ninth IEEE International Conference on Computer and Information Technology, CIT'09.",  publisher = "IEEE", }


@inbook{d38152b815a14529a3eec1cdc6b302f6,  title     = "SoC/SoPC development using MDD and MARTE profile",  author    = "D. Aulagnier and A. Koudri and St{\'e}phane Lecomte and P. Soulard and J. Champeau and J. Vidal and G. Perrouin and P. Leray",  year      = "2009",  language  = "English",  isbn      = "9781905209323",  booktitle = "Model Driven Engineering for Distributed Real-time Embedded Systems",  publisher = "Iste Publishing Company", }


@inproceedings{e998d659ab5b4853988dae1d7d560798,  title     = "Weaving variability into domain metamodels",  abstract  = "Domain-Specific Modeling Languages (DSMLs) describe the concepts of a particular domain and their relationships, in a metamodel. From a given DSML, it is possible to describe a wide range of different models. These models often share a common base and vary on some parts. Current approaches tend to distinguish the variability language from the DSMLs themselves, implying greater learning curve for DSMLs stakeholders and a significant overhead in product line engineering of DSMLs. We propose to consider variability as an independent aspect to be woven into the DSML to introduce variability capabilities. In particular we detail how variability is woven and how to perform product line derivation. We validate our approach through the weaving of variability into two very different metamodels: Ecore and SmartAdapter, our Aspect-Oriented modeling weaver, thus adding flexibility in the weaving process itself. These results emphasize how new abilities of the language can be provided by this means.",  author    = "B. Morin and G. Perrouin and P. Lahire and O. Barais and G. Vanwormhoudt and J.M. J{\'e}z{\'e}quel",  year      = "2009",  doi       = "10.1007/978-3-642-04425-0_56",  language  = "English",  isbn      = "978-3-642-04424-3",  pages     = "690--705",  booktitle = "Model Driven Engineering Languages and Systems",  publisher = "Springer", }


@inproceedings{eadb867d9c874eb2bde27e3cc0d02e92,  title     = "Modeling the variability space of self-adaptive applications",  abstract  = "Modeling self-adaptive applications is a difficult task due to the complex relationships they have with their environments. Designers of such applications strive to model accurately a few (re)-configuration possibilities deemed to be the most relevant with respect to environmental changes. This deliberate restriction of the variability space is cumbersome and may unnecessarily reject interesting (re)- configuration possibilities. We employ software product- line techniques to properly cover the whole variability space of a self-adaptive application. This variability space is partitioned across three dimensions. Functional variability is modeled through a feature diagram whose features are realized by a set of components to be deployed on a platform. Topological variability is modeled via an UML collaboration excluding irrelevant configurations. Platform variability is modeled through constraints to be satisfied by configurations. For each dimension, we exhibit properties capturing the environment. Our modeling approach is il- lustrated on a web-server example.",  author    = "G. Perrouin and F. Chauvel and J. DeAntoni and J.M. J{\'e}z{\'e}quel",  year      = "2008",  language  = "English",  isbn      = "978-1-905952-06-9",  volume    = "2",  pages     = "15--22",  booktitle = "12th Software Product Line Conference", }


@inproceedings{4eda310cdb174b868289b370c8fc6d4d,  title     = "Reconciling automation and flexibility in product derivation",  abstract  = "Product derivation, i.e. reusing core assets to build products, did not receive sufficient attention from the product-line community, yielding a frustrating situation. On the one hand, automated product derivation approaches are inflexible; they do not allow products meeting unforeseen, customer-specific, requirements. On the other hand, approaches that consider this issue do not provide adequate methodological guidelines nor automated support. This paper proposes an integrated product derivation approach reconciling the two views to offer both flexibility and automation. First, we perform a pre-configuration of the product by selecting desired features in a generic feature model and automatically composing their related product-line core assets. Then, we adapt the pre-configured product to its customer-specific requirements via derivation primitives combined by product engineers and controlled by constraints that flexibly set product line boundaries. Our process is supported by the Kermeta meta modeling environment and illustrated through an example.",  author    = "G. Perrouin and J. Klein and N. Guelfi and J.M. J{\'e}z{\'e}quel",  year      = "2008",  doi       = "10.1109/SPLC.2008.38",  language  = "English",  isbn      = "978-0-7695-3303-2",  pages     = "339--348",  booktitle = "Software Product Line Conference, 2008. SPLC'08. 12th International",  publisher = "IEEE", }


@article{06979ba100d94ed985e397c5a974df60,  title    = "Vers des Lignes de produits Flexibles",  author   = "Jean-Marc J{\'e}z{\'e}quel and Gilles Perrouin",  year     = "2008",  doi      = "10.3166/obj.14.3.33-45",  language = "Fran{\c c}ais",  volume   = "14",  pages    = "33--45",  journal  = "L'objet",  number   = "3", }


@inproceedings{fed0a0d58b0f49f3b66c319814b6c365,  title     = "A flexible requirements analysis approach for software product lines",  abstract  = "Product Line Engineering (PLE) promotes the development of applications by reusing a set of software assets belonging to a given domain. Important research efforts have been devoted to the description of commonalties and variabilities among these assets yielding requirements engineering techniques such as feature modeling or use case variants. However, current product derivation techniques, which strive to automate the derivation process, are inflexible in that they fail to accommodate products that represent only a minor deviation from the original product line. Furthermore, PLE methodologies do not provide precise support to assist product derivation in such cases. In this paper, we address flexibility issues by introducing an analysis model, based on UML, OCL and use cases, that implicitly defines define product line variabilities and boundaries by means of constraints forbidding undesired products. Then, in order to reuse domain assets in a coherent manner, an imperative model transformation mechanism is devised. We illustrate this approach through a simple example.",  author    = "N. Guelfi and G. Perrouin",  year      = "2007",  doi       = "10.1007/978-3-540-73031-6_6",  language  = "English",  volume    = "4542",  pages     = "78--92",  booktitle = "Proceedings of the 13th international working conference on Requirements engineering: foundation for software quality",  publisher = "Springer", }


@misc{51bfb0e020a84d2c8e4e01b8a3f3ed0f,  title    = "Architecting software systems using model transformations and architectural frameworks",  author   = "G. Perrouin",  year     = "2007",  language = "English",  type     = "Other", }


@inproceedings{37a1a666b1044df0bf68cb3f68d3f97b,  title     = "Coherent Integration of Variability Mechanisms at the Requirements Elicitation and Analysis Levels",  abstract  = "Early phases of product line development can be separated in requirement elicitation and analysis. The former provides an abstract and informal description of the product line, while the latter provides a technical specification as precise and as complete as possible. The major problems we face are to define the con- tent of each phase for optimal development cycle and to provide consistency between those phases. This paper aims at integrating product line variability mechanisms between requirements elicitation and analysis levels. First, we pre- sent a requirements elicitation template based on use case variants. Then, product analysis phase is done using a generative mechanism starting from the core analysis assets and specifying the variation covered by the use case variants. These mechanisms are coherently related by means of consistency rules and the same approach is employed to integrate feature models with the analysis phase. Finally elements for variability integration reasoning are derived on the basis of these rules.",  author    = "N. Guelfi and G. Perrouin",  year      = "2006",  language  = "English",  pages     = "58--70",  booktitle = "Variability Management – Working with Variability Mechanisms (Workshop of SPLC 06)", }


@article{254691cf46524fc6b82229a733d6e04b,  title     = "Evolution through architectural reconciliation",  abstract  = "One of the possible scenarios in a system evolution cycle, is to translate an emergent set of new requirements into software architecture design and subsequently to update the system implementation. In this paper, we argue that this form of forward engineering, even though addresses the new system requirements, tends to overlook the implementation constraints. An architect must also reverse-engineer the system, in order to make these constraints explicit. Thus, we propose an approach where we reconcile two architectural models, one that is forward-engineered from the requirements and another that is reverse-engineered from the implementation. The final reconciled model is optimally adapted to the emergent set of requirements and to the actual system implementation. The contribution of this paper is twofold: the application of architectural reconciliation in the context of software evolution and an approach to formalize both the specification and trans- formation of the architectural models. The architectural modeling is based upon the UML 2.0 standard, while the formalization approach is based on set theory and first-order logic.",  author    = "P. Avgeriou and N. Guelfi and G. Perrouin",  year      = "2005",  language  = "Ind{\'e}fini/inconnu",  volume    = "127",  pages     = "165--181",  journal   = "Electronic Notes in Theoretical Computer Science",  issn      = "1571-0661",  publisher = "Elsevier",  number    = "3", }


@inproceedings{7e99b31b90294daf827622a319f3cb1f,  title     = "Using model transformation and architectural frameworks to support the software development process: The FIDJI approach",  abstract  = "Framework-based development is a well-known software engineering practice which encourages reuse and thus reduces development costs. To improve maintainability and reuse, frameworks need to be modeled quite abstractly and provide specialization mechanisms to refine these models into concrete implementation. Hence they are candidates to address Model Driven Engineering (MDE) and Model Driven Architecture (MDA) challenges. Currently, few development methodologies for MDE integrate such frameworks in their processes. In this paper, we present a development approach called FIDJI, which bases its process on architectural framework specialization using model transformation and its associated CASE tool support.",  author    = "N. Guelfi and G. Perrouin",  year      = "2004",  language  = "English",  pages     = "13--22",  booktitle = "Midwest Software Engineering Conference (MSEC'04)", }


@inproceedings{896d8bf1f2ac427c94119884cc8183e9,  title     = "Supporting model-to-model transformations: The vmt approach",  abstract  = "The model-driven architecture approach (MDA) promotes software development as driven by a thorough modeling phase where application code is automatically generated from a platform specific UML model (PSM). The idea is that the PSM is itself derived from a platform independent UML model (PIM). Such code generation and model derivation are examples of model-to-model transformations.",  author    = "S. Sendall and G. Perrouin and N. Guelfi and O. Biberstein",  year      = "2003",  language  = "English",  volume    = "CTIT Technical Report TR-CTIT-03-27",  pages     = "61--72",  booktitle = "Model Driven Architecture Foundations and Applications", }


@inproceedings{c2b3060c3c4c4434af7e883d9518231c,  title     = "Rigorous engineering of software architectures: Integrating ADLs, UML and development methodologies",  abstract  = "Architecture engineering is an area that is under construction for being transferred to software engineers. Many results exist from high-level formal and conceptual approaches to basic good practices taken from industrial experiences. Descriptions and methodologies should be at least considered for architecture engineering. Two interesting approaches to architecture description are avail able: Architecture Description Languages (ADL) or modeling languages (especially UML). In the first case, efforts have been made to provide rigorous integrated languages dedicated to architecture engineering but unfortunately these languages are incomplete and not ready for technology transfer. Concerning UML, many approaches use UML models for partial architecture descriptions. In both cases, a few efforts have been made on methodology. This paper presents the current state of the art covering architecture descriptions and development methodologies for architecture engineering. We present a first integrated approach, called FIDJI that tries to take advantage from ADLs, UML, and some development methodologies. FIDJI uses UML for its models, MDA for its layering and ADLs for precision. Concerning methodology, FIDJI follows the HP recommendations and the notion of refinement and contracts taken from formal development methodologies. Finally, we briefly illustrate the use of the FIDJI approach by means of a real web-based distributed application.",  author    = "N. Guelfi and G. Perrouin",  year      = "2002",  language  = "English",  isbn      = "0-88986-323-7",  booktitle = "Software Engineering and Applications",  publisher = "ACTA Press", }
